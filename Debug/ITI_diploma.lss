
ITI_diploma.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000249a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  0000249a  0000250e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002acc  00000000  00000000  0000254c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000014a3  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000064bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000065fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000676b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000083b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000929f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a04c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a439  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ac07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e5 11 	call	0x23ca	; 0x23ca <main>
      7a:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e6       	ldi	r26, 0x6B	; 107
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e6       	ldi	r24, 0x6B	; 107
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_vidInit>:
/* Name: DIO_vidInit
 * Description: initialize all the MC pins according to "DIO_cfg.h"
 * Arguments: void
 * Return:	void
 */
void DIO_vidInit(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	 SETTING DDR OPTIONS:
	 * INPUT  ---> 0
	 * OUTPUT ---> 1
	*/
	// Set DDR values
	DIO_u8_DDRA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5
     b3e:	ea e3       	ldi	r30, 0x3A	; 58
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	87 e0       	ldi	r24, 0x07	; 7
     b44:	80 83       	st	Z, r24
								, DIO_u8_PORTA_PIN4 , DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2
								, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);

	DIO_u8_DDRB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5
     b46:	e7 e3       	ldi	r30, 0x37	; 55
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	8d ef       	ldi	r24, 0xFD	; 253
     b4c:	80 83       	st	Z, r24
							, DIO_u8_PORTB_PIN4 , DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2
							, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

	DIO_u8_DDRC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5
     b4e:	e4 e3       	ldi	r30, 0x34	; 52
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
							, DIO_u8_PORTC_PIN4 , DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2
							, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

	DIO_u8_DDRD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5
     b56:	e1 e3       	ldi	r30, 0x31	; 49
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 ef       	ldi	r24, 0xF0	; 240
     b5c:	80 83       	st	Z, r24
	#define DIO_u8_OUTPUT_LOW				0
	#define DIO_u8_OUTPUT_HIGH				1
	#define DIO_u8_INPUT_FLOATING			0
	#define DIO_u8_INPUT_PULLUP				1
	// Set PORT values
	DIO_u8_PORTA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5
     b5e:	eb e3       	ldi	r30, 0x3B	; 59
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	88 ef       	ldi	r24, 0xF8	; 248
     b64:	80 83       	st	Z, r24
								, DIO_u8_PORTA_PIN4 , DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2
								, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);

	DIO_u8_PORTB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5
     b66:	e8 e3       	ldi	r30, 0x38	; 56
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	82 ee       	ldi	r24, 0xE2	; 226
     b6c:	80 83       	st	Z, r24
							, DIO_u8_PORTB_PIN4 , DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2
							, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

	DIO_u8_PORTC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5
     b6e:	e5 e3       	ldi	r30, 0x35	; 53
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	10 82       	st	Z, r1
							, DIO_u8_PORTC_PIN4 , DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2
							, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

	DIO_u8_PORTD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5
     b74:	e2 e3       	ldi	r30, 0x32	; 50
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	8f ef       	ldi	r24, 0xFF	; 255
     b7a:	80 83       	st	Z, r24
	#define DIO_u8_OUTPUT_LOW				1
	#define DIO_u8_OUTPUT_HIGH				1
	#define DIO_u8_INPUT_FLOATING			0
	#define DIO_u8_INPUT_PULLUP				0

}
     b7c:	cf 91       	pop	r28
     b7e:	df 91       	pop	r29
     b80:	08 95       	ret

00000b82 <DIO_enuSetPinValue>:
 * 				first Argument: Copy_u8Port, 			options (DIO_u8_PORTA, DIO_u8_PORTB, DIO_u8_PORTC, DIO_u8_PORTD)
 * 				second Argument: Copy_u8Pin, 			options (from DIO_u8_PIN0 to DIO_u8_PIN7)
 * 				third Argument: Copy_u8Value, 			options (DIO_u8_HIGH, DIO_u8_LOW)
 * Return:	Error Status -----> DIO_OK , DIO_NOK
 */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
     b82:	df 93       	push	r29
     b84:	cf 93       	push	r28
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	2e 97       	sbiw	r28, 0x0e	; 14
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	8a 83       	std	Y+2, r24	; 0x02
     b98:	6b 83       	std	Y+3, r22	; 0x03
     b9a:	4c 83       	std	Y+4, r20	; 0x04
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     b9c:	19 82       	std	Y+1, r1	; 0x01
	/*check arguments*/
	if((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Copy_u8Value > DIO_u8_HIGH)){
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	84 30       	cpi	r24, 0x04	; 4
     ba2:	30 f4       	brcc	.+12     	; 0xbb0 <DIO_enuSetPinValue+0x2e>
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	88 30       	cpi	r24, 0x08	; 8
     ba8:	18 f4       	brcc	.+6      	; 0xbb0 <DIO_enuSetPinValue+0x2e>
     baa:	8c 81       	ldd	r24, Y+4	; 0x04
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	18 f0       	brcs	.+6      	; 0xbb6 <DIO_enuSetPinValue+0x34>
		Local_enuErrorStatus = DIO_NOK;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	89 83       	std	Y+1, r24	; 0x01
     bb4:	d7 c0       	rjmp	.+430    	; 0xd64 <DIO_enuSetPinValue+0x1e2>
	}
	else {
	/*set pin value*/
		switch (Copy_u8Port){
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	3e 87       	std	Y+14, r19	; 0x0e
     bbe:	2d 87       	std	Y+13, r18	; 0x0d
     bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	91 05       	cpc	r25, r1
     bc8:	09 f4       	brne	.+2      	; 0xbcc <DIO_enuSetPinValue+0x4a>
     bca:	44 c0       	rjmp	.+136    	; 0xc54 <DIO_enuSetPinValue+0xd2>
     bcc:	2d 85       	ldd	r18, Y+13	; 0x0d
     bce:	3e 85       	ldd	r19, Y+14	; 0x0e
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <DIO_enuSetPinValue+0x5e>
     bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	71 f0       	breq	.+28     	; 0xbfa <DIO_enuSetPinValue+0x78>
     bde:	c2 c0       	rjmp	.+388    	; 0xd64 <DIO_enuSetPinValue+0x1e2>
     be0:	2d 85       	ldd	r18, Y+13	; 0x0d
     be2:	3e 85       	ldd	r19, Y+14	; 0x0e
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	09 f4       	brne	.+2      	; 0xbec <DIO_enuSetPinValue+0x6a>
     bea:	62 c0       	rjmp	.+196    	; 0xcb0 <DIO_enuSetPinValue+0x12e>
     bec:	8d 85       	ldd	r24, Y+13	; 0x0d
     bee:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	91 05       	cpc	r25, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <DIO_enuSetPinValue+0x76>
     bf6:	89 c0       	rjmp	.+274    	; 0xd0a <DIO_enuSetPinValue+0x188>
     bf8:	b5 c0       	rjmp	.+362    	; 0xd64 <DIO_enuSetPinValue+0x1e2>
			case DIO_u8_PORTA:
				(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTA_REG |= (DIO_u8_SET << Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(DIO_u8_SET << Copy_u8Pin));
     bfa:	8c 81       	ldd	r24, Y+4	; 0x04
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	a9 f4       	brne	.+42     	; 0xc2a <DIO_enuSetPinValue+0xa8>
     c00:	ab e3       	ldi	r26, 0x3B	; 59
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	eb e3       	ldi	r30, 0x3B	; 59
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	48 2f       	mov	r20, r24
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 2e       	mov	r0, r18
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <DIO_enuSetPinValue+0x9c>
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	0a 94       	dec	r0
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <DIO_enuSetPinValue+0x98>
     c22:	84 2b       	or	r24, r20
     c24:	8c 93       	st	X, r24
     c26:	9c 91       	ld	r25, X
     c28:	9d c0       	rjmp	.+314    	; 0xd64 <DIO_enuSetPinValue+0x1e2>
     c2a:	ab e3       	ldi	r26, 0x3B	; 59
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	eb e3       	ldi	r30, 0x3B	; 59
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	48 2f       	mov	r20, r24
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DIO_enuSetPinValue+0xc4>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	2a 95       	dec	r18
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <DIO_enuSetPinValue+0xc0>
     c4a:	80 95       	com	r24
     c4c:	84 23       	and	r24, r20
     c4e:	8c 93       	st	X, r24
     c50:	2c 91       	ld	r18, X
     c52:	88 c0       	rjmp	.+272    	; 0xd64 <DIO_enuSetPinValue+0x1e2>
				break;
			case DIO_u8_PORTB:
				(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTB_REG |= (DIO_u8_SET << Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(DIO_u8_SET << Copy_u8Pin));
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	a9 f4       	brne	.+42     	; 0xc84 <DIO_enuSetPinValue+0x102>
     c5a:	a8 e3       	ldi	r26, 0x38	; 56
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e8 e3       	ldi	r30, 0x38	; 56
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	48 2f       	mov	r20, r24
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 2e       	mov	r0, r18
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <DIO_enuSetPinValue+0xf6>
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	0a 94       	dec	r0
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <DIO_enuSetPinValue+0xf2>
     c7c:	84 2b       	or	r24, r20
     c7e:	8c 93       	st	X, r24
     c80:	3c 91       	ld	r19, X
     c82:	70 c0       	rjmp	.+224    	; 0xd64 <DIO_enuSetPinValue+0x1e2>
     c84:	a8 e3       	ldi	r26, 0x38	; 56
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e8 e3       	ldi	r30, 0x38	; 56
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	48 2f       	mov	r20, r24
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	02 2e       	mov	r0, r18
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <DIO_enuSetPinValue+0x120>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <DIO_enuSetPinValue+0x11c>
     ca6:	80 95       	com	r24
     ca8:	84 23       	and	r24, r20
     caa:	8c 93       	st	X, r24
     cac:	8c 91       	ld	r24, X
     cae:	5a c0       	rjmp	.+180    	; 0xd64 <DIO_enuSetPinValue+0x1e2>
				break;
			case DIO_u8_PORTC:
				(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTC_REG |= (DIO_u8_SET << Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(DIO_u8_SET << Copy_u8Pin));
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	a9 f4       	brne	.+42     	; 0xce0 <DIO_enuSetPinValue+0x15e>
     cb6:	a5 e3       	ldi	r26, 0x35	; 53
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e5 e3       	ldi	r30, 0x35	; 53
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	48 2f       	mov	r20, r24
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 2e       	mov	r0, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <DIO_enuSetPinValue+0x152>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	0a 94       	dec	r0
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <DIO_enuSetPinValue+0x14e>
     cd8:	84 2b       	or	r24, r20
     cda:	8c 93       	st	X, r24
     cdc:	9c 91       	ld	r25, X
     cde:	42 c0       	rjmp	.+132    	; 0xd64 <DIO_enuSetPinValue+0x1e2>
     ce0:	a5 e3       	ldi	r26, 0x35	; 53
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e5 e3       	ldi	r30, 0x35	; 53
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <DIO_enuSetPinValue+0x17a>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	2a 95       	dec	r18
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <DIO_enuSetPinValue+0x176>
     d00:	80 95       	com	r24
     d02:	84 23       	and	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	2c 91       	ld	r18, X
     d08:	2d c0       	rjmp	.+90     	; 0xd64 <DIO_enuSetPinValue+0x1e2>
				break;
			case DIO_u8_PORTD:
				(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTD_REG |= (DIO_u8_SET << Copy_u8Pin)) : (DIO_u8_PORTD_REG &= ~(DIO_u8_SET << Copy_u8Pin));
     d0a:	8c 81       	ldd	r24, Y+4	; 0x04
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	a9 f4       	brne	.+42     	; 0xd3a <DIO_enuSetPinValue+0x1b8>
     d10:	a2 e3       	ldi	r26, 0x32	; 50
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e2 e3       	ldi	r30, 0x32	; 50
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 2e       	mov	r0, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <DIO_enuSetPinValue+0x1ac>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	0a 94       	dec	r0
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <DIO_enuSetPinValue+0x1a8>
     d32:	84 2b       	or	r24, r20
     d34:	8c 93       	st	X, r24
     d36:	3c 91       	ld	r19, X
     d38:	15 c0       	rjmp	.+42     	; 0xd64 <DIO_enuSetPinValue+0x1e2>
     d3a:	a2 e3       	ldi	r26, 0x32	; 50
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e2 e3       	ldi	r30, 0x32	; 50
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 2e       	mov	r0, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_enuSetPinValue+0x1d6>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_enuSetPinValue+0x1d2>
     d5c:	80 95       	com	r24
     d5e:	84 23       	and	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	8c 91       	ld	r24, X
				break;
		}
	}


	return Local_enuErrorStatus;
     d64:	89 81       	ldd	r24, Y+1	; 0x01
}
     d66:	2e 96       	adiw	r28, 0x0e	; 14
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <DIO_enuSetPortValue>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (DIO_u8_PORTA, DIO_u8_PORTB, DIO_u8_PORTC, DIO_u8_PORTD)
 * 				second Argument: Copy_u8Value, 			options (any macro refer to hixa_number)
 * Return:	Error Status -----> DIO_OK , DIO_NOK
 */
DIO_tenuErrorStatus DIO_enuSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <DIO_enuSetPortValue+0x6>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <DIO_enuSetPortValue+0x8>
     d80:	0f 92       	push	r0
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	6b 83       	std	Y+3, r22	; 0x03
	DIO_tenuErrorStatus Local_enumErrorStatus = DIO_OK;
     d8a:	19 82       	std	Y+1, r1	; 0x01
	/*check arguments*/
	/*if((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Value > DIO_u8_HIGH)){
		Local_enumErrorStatus = DIO_NOK;
	}
	else{*/
		switch (Copy_u8Port){
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	3d 83       	std	Y+5, r19	; 0x05
     d94:	2c 83       	std	Y+4, r18	; 0x04
     d96:	8c 81       	ldd	r24, Y+4	; 0x04
     d98:	9d 81       	ldd	r25, Y+5	; 0x05
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	91 05       	cpc	r25, r1
     d9e:	d1 f0       	breq	.+52     	; 0xdd4 <DIO_enuSetPortValue+0x5c>
     da0:	2c 81       	ldd	r18, Y+4	; 0x04
     da2:	3d 81       	ldd	r19, Y+5	; 0x05
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	2c f4       	brge	.+10     	; 0xdb4 <DIO_enuSetPortValue+0x3c>
     daa:	8c 81       	ldd	r24, Y+4	; 0x04
     dac:	9d 81       	ldd	r25, Y+5	; 0x05
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	61 f0       	breq	.+24     	; 0xdca <DIO_enuSetPortValue+0x52>
     db2:	1e c0       	rjmp	.+60     	; 0xdf0 <DIO_enuSetPortValue+0x78>
     db4:	2c 81       	ldd	r18, Y+4	; 0x04
     db6:	3d 81       	ldd	r19, Y+5	; 0x05
     db8:	22 30       	cpi	r18, 0x02	; 2
     dba:	31 05       	cpc	r19, r1
     dbc:	81 f0       	breq	.+32     	; 0xdde <DIO_enuSetPortValue+0x66>
     dbe:	8c 81       	ldd	r24, Y+4	; 0x04
     dc0:	9d 81       	ldd	r25, Y+5	; 0x05
     dc2:	83 30       	cpi	r24, 0x03	; 3
     dc4:	91 05       	cpc	r25, r1
     dc6:	81 f0       	breq	.+32     	; 0xde8 <DIO_enuSetPortValue+0x70>
     dc8:	13 c0       	rjmp	.+38     	; 0xdf0 <DIO_enuSetPortValue+0x78>
			case DIO_u8_PORTA:		DIO_u8_PORTA_REG = Copy_u8Value;		break;
     dca:	eb e3       	ldi	r30, 0x3B	; 59
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	80 83       	st	Z, r24
     dd2:	0e c0       	rjmp	.+28     	; 0xdf0 <DIO_enuSetPortValue+0x78>
			case DIO_u8_PORTB:		DIO_u8_PORTB_REG = Copy_u8Value;		break;
     dd4:	e8 e3       	ldi	r30, 0x38	; 56
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	80 83       	st	Z, r24
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <DIO_enuSetPortValue+0x78>
			case DIO_u8_PORTC:		DIO_u8_PORTC_REG = Copy_u8Value;		break;
     dde:	e5 e3       	ldi	r30, 0x35	; 53
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	80 83       	st	Z, r24
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <DIO_enuSetPortValue+0x78>
			case DIO_u8_PORTD:		DIO_u8_PORTD_REG = Copy_u8Value;		break;
     de8:	e2 e3       	ldi	r30, 0x32	; 50
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	80 83       	st	Z, r24
		}
	//}
	return Local_enumErrorStatus;
     df0:	89 81       	ldd	r24, Y+1	; 0x01
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <DIO_enuGetPinValue>:
 * 				first Argument: Copy_u8Port, 			options (DIO_u8_PORTA, DIO_u8_PORTB, DIO_u8_PORTC, DIO_u8_PORTD)
 * 				second Argument: Copy_u8Pin,			options (from DIO_u8_PIN0 to DIO_u8_PIN7)
 * 				third Argument: variable address to store PIN value
 * Return:	Error Status -----> DIO_OK , DIO_NOK
 */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue) {
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	27 97       	sbiw	r28, 0x07	; 7
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	8a 83       	std	Y+2, r24	; 0x02
     e18:	6b 83       	std	Y+3, r22	; 0x03
     e1a:	5d 83       	std	Y+5, r21	; 0x05
     e1c:	4c 83       	std	Y+4, r20	; 0x04
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     e1e:	19 82       	std	Y+1, r1	; 0x01

	/* check arguments */
	if((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Add_pu8PinValue  == NULL)) {
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	84 30       	cpi	r24, 0x04	; 4
     e24:	38 f4       	brcc	.+14     	; 0xe34 <DIO_enuGetPinValue+0x32>
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	88 30       	cpi	r24, 0x08	; 8
     e2a:	20 f4       	brcc	.+8      	; 0xe34 <DIO_enuGetPinValue+0x32>
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	9d 81       	ldd	r25, Y+5	; 0x05
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	19 f4       	brne	.+6      	; 0xe3a <DIO_enuGetPinValue+0x38>
		Local_enuErrorStatus = DIO_NOK;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	70 c0       	rjmp	.+224    	; 0xf1a <DIO_enuGetPinValue+0x118>
	} else {
		/*implementation */
		switch(Copy_u8Port)
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	3f 83       	std	Y+7, r19	; 0x07
     e42:	2e 83       	std	Y+6, r18	; 0x06
     e44:	4e 81       	ldd	r20, Y+6	; 0x06
     e46:	5f 81       	ldd	r21, Y+7	; 0x07
     e48:	41 30       	cpi	r20, 0x01	; 1
     e4a:	51 05       	cpc	r21, r1
     e4c:	59 f1       	breq	.+86     	; 0xea4 <DIO_enuGetPinValue+0xa2>
     e4e:	8e 81       	ldd	r24, Y+6	; 0x06
     e50:	9f 81       	ldd	r25, Y+7	; 0x07
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	91 05       	cpc	r25, r1
     e56:	34 f4       	brge	.+12     	; 0xe64 <DIO_enuGetPinValue+0x62>
     e58:	2e 81       	ldd	r18, Y+6	; 0x06
     e5a:	3f 81       	ldd	r19, Y+7	; 0x07
     e5c:	21 15       	cp	r18, r1
     e5e:	31 05       	cpc	r19, r1
     e60:	69 f0       	breq	.+26     	; 0xe7c <DIO_enuGetPinValue+0x7a>
     e62:	5b c0       	rjmp	.+182    	; 0xf1a <DIO_enuGetPinValue+0x118>
     e64:	4e 81       	ldd	r20, Y+6	; 0x06
     e66:	5f 81       	ldd	r21, Y+7	; 0x07
     e68:	42 30       	cpi	r20, 0x02	; 2
     e6a:	51 05       	cpc	r21, r1
     e6c:	79 f1       	breq	.+94     	; 0xecc <DIO_enuGetPinValue+0xca>
     e6e:	8e 81       	ldd	r24, Y+6	; 0x06
     e70:	9f 81       	ldd	r25, Y+7	; 0x07
     e72:	83 30       	cpi	r24, 0x03	; 3
     e74:	91 05       	cpc	r25, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <DIO_enuGetPinValue+0x78>
     e78:	3d c0       	rjmp	.+122    	; 0xef4 <DIO_enuGetPinValue+0xf2>
     e7a:	4f c0       	rjmp	.+158    	; 0xf1a <DIO_enuGetPinValue+0x118>
		{
			case DIO_u8_PORTA:
				*Add_pu8PinValue = (DIO_u8_PINA_REG >> Copy_u8Pin) & 0x01;
     e7c:	e9 e3       	ldi	r30, 0x39	; 57
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a9 01       	movw	r20, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_enuGetPinValue+0x92>
     e90:	55 95       	asr	r21
     e92:	47 95       	ror	r20
     e94:	8a 95       	dec	r24
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_enuGetPinValue+0x8e>
     e98:	ca 01       	movw	r24, r20
     e9a:	81 70       	andi	r24, 0x01	; 1
     e9c:	ec 81       	ldd	r30, Y+4	; 0x04
     e9e:	fd 81       	ldd	r31, Y+5	; 0x05
     ea0:	80 83       	st	Z, r24
     ea2:	3b c0       	rjmp	.+118    	; 0xf1a <DIO_enuGetPinValue+0x118>
				break;

			case DIO_u8_PORTB:
				*Add_pu8PinValue = (DIO_u8_PINB_REG >> Copy_u8Pin) & 0x01;
     ea4:	e6 e3       	ldi	r30, 0x36	; 54
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	a9 01       	movw	r20, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_enuGetPinValue+0xba>
     eb8:	55 95       	asr	r21
     eba:	47 95       	ror	r20
     ebc:	8a 95       	dec	r24
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_enuGetPinValue+0xb6>
     ec0:	ca 01       	movw	r24, r20
     ec2:	81 70       	andi	r24, 0x01	; 1
     ec4:	ec 81       	ldd	r30, Y+4	; 0x04
     ec6:	fd 81       	ldd	r31, Y+5	; 0x05
     ec8:	80 83       	st	Z, r24
     eca:	27 c0       	rjmp	.+78     	; 0xf1a <DIO_enuGetPinValue+0x118>
				break;

			case DIO_u8_PORTC:
				*Add_pu8PinValue = (DIO_u8_PINC_REG >> Copy_u8Pin) & 0x01;
     ecc:	e3 e3       	ldi	r30, 0x33	; 51
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	a9 01       	movw	r20, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_enuGetPinValue+0xe2>
     ee0:	55 95       	asr	r21
     ee2:	47 95       	ror	r20
     ee4:	8a 95       	dec	r24
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_enuGetPinValue+0xde>
     ee8:	ca 01       	movw	r24, r20
     eea:	81 70       	andi	r24, 0x01	; 1
     eec:	ec 81       	ldd	r30, Y+4	; 0x04
     eee:	fd 81       	ldd	r31, Y+5	; 0x05
     ef0:	80 83       	st	Z, r24
     ef2:	13 c0       	rjmp	.+38     	; 0xf1a <DIO_enuGetPinValue+0x118>
				break;

			case DIO_u8_PORTD:
				*Add_pu8PinValue = (DIO_u8_PIND_REG >> Copy_u8Pin) & 0x01;
     ef4:	e0 e3       	ldi	r30, 0x30	; 48
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a9 01       	movw	r20, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_enuGetPinValue+0x10a>
     f08:	55 95       	asr	r21
     f0a:	47 95       	ror	r20
     f0c:	8a 95       	dec	r24
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_enuGetPinValue+0x106>
     f10:	ca 01       	movw	r24, r20
     f12:	81 70       	andi	r24, 0x01	; 1
     f14:	ec 81       	ldd	r30, Y+4	; 0x04
     f16:	fd 81       	ldd	r31, Y+5	; 0x05
     f18:	80 83       	st	Z, r24
				break;
		}
	}
	return Local_enuErrorStatus;
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1c:	27 96       	adiw	r28, 0x07	; 7
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <DIO_enuGetPortValue>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (DIO_u8_PORTA, DIO_u8_PORTB, DIO_u8_PORTC, DIO_u8_PORTD)
 * 				second Argument: variable address to store PORT value
 * Return:	Error Status -----> DIO_OK , DIO_NOK
 */
DIO_tenuErrorStatus DIO_enuGetPortValue(u8 Copy_u8Port, u8 *Add_pu8PortValue){
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <DIO_enuGetPortValue+0x6>
     f34:	00 d0       	rcall	.+0      	; 0xf36 <DIO_enuGetPortValue+0x8>
     f36:	00 d0       	rcall	.+0      	; 0xf38 <DIO_enuGetPortValue+0xa>
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	8a 83       	std	Y+2, r24	; 0x02
     f3e:	7c 83       	std	Y+4, r23	; 0x04
     f40:	6b 83       	std	Y+3, r22	; 0x03
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     f42:	19 82       	std	Y+1, r1	; 0x01
			switch(Copy_u8Port) {
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	3e 83       	std	Y+6, r19	; 0x06
     f4c:	2d 83       	std	Y+5, r18	; 0x05
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	91 05       	cpc	r25, r1
     f56:	e1 f0       	breq	.+56     	; 0xf90 <DIO_enuGetPortValue+0x62>
     f58:	2d 81       	ldd	r18, Y+5	; 0x05
     f5a:	3e 81       	ldd	r19, Y+6	; 0x06
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	2c f4       	brge	.+10     	; 0xf6c <DIO_enuGetPortValue+0x3e>
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	61 f0       	breq	.+24     	; 0xf82 <DIO_enuGetPortValue+0x54>
     f6a:	26 c0       	rjmp	.+76     	; 0xfb8 <DIO_enuGetPortValue+0x8a>
     f6c:	2d 81       	ldd	r18, Y+5	; 0x05
     f6e:	3e 81       	ldd	r19, Y+6	; 0x06
     f70:	22 30       	cpi	r18, 0x02	; 2
     f72:	31 05       	cpc	r19, r1
     f74:	a1 f0       	breq	.+40     	; 0xf9e <DIO_enuGetPortValue+0x70>
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	83 30       	cpi	r24, 0x03	; 3
     f7c:	91 05       	cpc	r25, r1
     f7e:	b1 f0       	breq	.+44     	; 0xfac <DIO_enuGetPortValue+0x7e>
     f80:	1b c0       	rjmp	.+54     	; 0xfb8 <DIO_enuGetPortValue+0x8a>
				case DIO_u8_PORTA:
					*Add_pu8PortValue = DIO_u8_PINA_REG;
     f82:	e9 e3       	ldi	r30, 0x39	; 57
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	eb 81       	ldd	r30, Y+3	; 0x03
     f8a:	fc 81       	ldd	r31, Y+4	; 0x04
     f8c:	80 83       	st	Z, r24
     f8e:	14 c0       	rjmp	.+40     	; 0xfb8 <DIO_enuGetPortValue+0x8a>
					break;

				case DIO_u8_PORTB:
					*Add_pu8PortValue = DIO_u8_PINB_REG;
     f90:	e6 e3       	ldi	r30, 0x36	; 54
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	eb 81       	ldd	r30, Y+3	; 0x03
     f98:	fc 81       	ldd	r31, Y+4	; 0x04
     f9a:	80 83       	st	Z, r24
     f9c:	0d c0       	rjmp	.+26     	; 0xfb8 <DIO_enuGetPortValue+0x8a>
					break;

				case DIO_u8_PORTC:
					*Add_pu8PortValue = DIO_u8_PINC_REG;
     f9e:	e3 e3       	ldi	r30, 0x33	; 51
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	eb 81       	ldd	r30, Y+3	; 0x03
     fa6:	fc 81       	ldd	r31, Y+4	; 0x04
     fa8:	80 83       	st	Z, r24
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <DIO_enuGetPortValue+0x8a>
					break;

				case DIO_u8_PORTD:
					*Add_pu8PortValue = DIO_u8_PIND_REG;
     fac:	e0 e3       	ldi	r30, 0x30	; 48
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	eb 81       	ldd	r30, Y+3	; 0x03
     fb4:	fc 81       	ldd	r31, Y+4	; 0x04
     fb6:	80 83       	st	Z, r24
					break;
			}
	return Local_enuErrorStatus;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fba:	26 96       	adiw	r28, 0x06	; 6
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <STEPPER_vidInit>:
#include "../../MCAL/DIO/DIO_int.h"
#include "STEPPER_int.h"



void STEPPER_vidInit(void){
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
     fd4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidInit>
}
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <STEPPER_enuFullStep>:



STEPPER_tenuErrorStatus STEPPER_enuFullStep(u8 Copy_u8Angle){
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <STEPPER_enuFullStep+0x6>
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	8a 83       	std	Y+2, r24	; 0x02
	STEPPER_tenuErrorStatus Local_enuErrorStatus = STEPPER_OK;
     fea:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Angle < STEPPER_u8_MIN_ANGLE){
		Local_enuErrorStatus = STEPPER_NOK;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	89 83       	std	Y+1, r24	; 0x01
		}


	return Local_enuErrorStatus;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <LED_vidInit>:
 * Name: LED_vidInit
 * Description: initialize LEDs status
 * Arguments: void
 * Return:	void
*/
void LED_vidInit(void){
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    1004:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidInit>
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <LED_enuTurnLedStatus>:
 * 				first Argument: Copy_u8_LedIndex, 			options (LED_u8_LED1, LED_u8_LED2, LED_u8_LED3, LED_u8_LED4,
 * 																	LED_u8_LED5, LED_u8_LED6, LED_u8_LED7, LED_u8_LED8)
 * 				second Argument: Copy_u8Status, 			options (LED_u8_TURN_OFF, LED_u8_TURN_ON)
 * Return:	Error Status -----> LED_OK , LED_NOK
*/
LED_tenuErrorStatus LED_enuTurnLedStatus(u8 Copy_u8_LedIndex, u8 Copy_u8Status){
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <LED_enuTurnLedStatus+0x6>
    1014:	0f 92       	push	r0
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	8a 83       	std	Y+2, r24	; 0x02
    101c:	6b 83       	std	Y+3, r22	; 0x03
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
    101e:	19 82       	std	Y+1, r1	; 0x01

	/*check arguments*/
	if ((Copy_u8_LedIndex > LED_u8_LED_ARRAY_INDEX) || (Copy_u8Status > LED_u8_TURN_ON)){
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	88 30       	cpi	r24, 0x08	; 8
    1024:	18 f4       	brcc	.+6      	; 0x102c <LED_enuTurnLedStatus+0x1e>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	82 30       	cpi	r24, 0x02	; 2
    102a:	18 f0       	brcs	.+6      	; 0x1032 <LED_enuTurnLedStatus+0x24>
		Local_enuErrorStatus = LED_NOK;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	17 c0       	rjmp	.+46     	; 0x1060 <LED_enuTurnLedStatus+0x52>
	} else {

	/*****IMPLEMENTATION*****/
		DIO_enuSetPinValue(LED_u8_PORT_PIN[Copy_u8_LedIndex][LED_u8_LED_PORT], LED_u8_PORT_PIN[Copy_u8_LedIndex][LED_u8_LED_PIN], Copy_u8Status);
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	fc 01       	movw	r30, r24
    103e:	ed 58       	subi	r30, 0x8D	; 141
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	20 81       	ld	r18, Z
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	fc 01       	movw	r30, r24
    1050:	ec 58       	subi	r30, 0x8C	; 140
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	90 81       	ld	r25, Z
    1056:	82 2f       	mov	r24, r18
    1058:	69 2f       	mov	r22, r25
    105a:	4b 81       	ldd	r20, Y+3	; 0x03
    105c:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_enuSetPinValue>

	}
	return Local_enuErrorStatus;
    1060:	89 81       	ldd	r24, Y+1	; 0x01
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <LED_enuMode1>:


/*
 *
*/
LED_tenuErrorStatus LED_enuMode1(void){
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	60 97       	sbiw	r28, 0x10	; 16
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
    1082:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8Iterator;

	for (Local_u8Iterator = 0; Local_u8Iterator < LED_u8_LED_NUMBER; Local_u8Iterator++){
    1084:	1f 86       	std	Y+15, r1	; 0x0f
    1086:	7d c0       	rjmp	.+250    	; 0x1182 <LED_enuMode1+0x114>
		LED_enuTurnLedStatus(Local_u8Iterator, LED_u8_TURN_ON);
    1088:	8f 85       	ldd	r24, Y+15	; 0x0f
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a0 e2       	ldi	r26, 0x20	; 32
    1096:	b1 e4       	ldi	r27, 0x41	; 65
    1098:	8b 87       	std	Y+11, r24	; 0x0b
    109a:	9c 87       	std	Y+12, r25	; 0x0c
    109c:	ad 87       	std	Y+13, r26	; 0x0d
    109e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4a e7       	ldi	r20, 0x7A	; 122
    10ae:	55 e4       	ldi	r21, 0x45	; 69
    10b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	8f 83       	std	Y+7, r24	; 0x07
    10ba:	98 87       	std	Y+8, r25	; 0x08
    10bc:	a9 87       	std	Y+9, r26	; 0x09
    10be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c0:	6f 81       	ldd	r22, Y+7	; 0x07
    10c2:	78 85       	ldd	r23, Y+8	; 0x08
    10c4:	89 85       	ldd	r24, Y+9	; 0x09
    10c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e8       	ldi	r20, 0x80	; 128
    10ce:	5f e3       	ldi	r21, 0x3F	; 63
    10d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10d4:	88 23       	and	r24, r24
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <LED_enuMode1+0x74>
		__ticks = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <LED_enuMode1+0xf2>
	else if (__tmp > 65535)
    10e2:	6f 81       	ldd	r22, Y+7	; 0x07
    10e4:	78 85       	ldd	r23, Y+8	; 0x08
    10e6:	89 85       	ldd	r24, Y+9	; 0x09
    10e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	3f ef       	ldi	r19, 0xFF	; 255
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	57 e4       	ldi	r21, 0x47	; 71
    10f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	4c f5       	brge	.+82     	; 0x114c <LED_enuMode1+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	9e 85       	ldd	r25, Y+14	; 0x0e
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	0f c0       	rjmp	.+30     	; 0x1142 <LED_enuMode1+0xd4>
    1124:	80 e9       	ldi	r24, 0x90	; 144
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <LED_enuMode1+0xc2>
    1134:	9c 83       	std	Y+4, r25	; 0x04
    1136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9e 83       	std	Y+6, r25	; 0x06
    1140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	69 f7       	brne	.-38     	; 0x1124 <LED_enuMode1+0xb6>
    114a:	14 c0       	rjmp	.+40     	; 0x1174 <LED_enuMode1+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <LED_enuMode1+0xfe>
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		LED_enuTurnLedStatus(Local_u8Iterator, LED_u8_TURN_OFF);
    1174:	8f 85       	ldd	r24, Y+15	; 0x0f
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
*/
LED_tenuErrorStatus LED_enuMode1(void){
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
	u8 Local_u8Iterator;

	for (Local_u8Iterator = 0; Local_u8Iterator < LED_u8_LED_NUMBER; Local_u8Iterator++){
    117c:	8f 85       	ldd	r24, Y+15	; 0x0f
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	8f 87       	std	Y+15, r24	; 0x0f
    1182:	8f 85       	ldd	r24, Y+15	; 0x0f
    1184:	88 30       	cpi	r24, 0x08	; 8
    1186:	08 f4       	brcc	.+2      	; 0x118a <LED_enuMode1+0x11c>
    1188:	7f cf       	rjmp	.-258    	; 0x1088 <LED_enuMode1+0x1a>
		LED_enuTurnLedStatus(Local_u8Iterator, LED_u8_TURN_ON);
		_delay_ms(10);
		LED_enuTurnLedStatus(Local_u8Iterator, LED_u8_TURN_OFF);
	}

	return Local_enuErrorStatus;
    118a:	88 89       	ldd	r24, Y+16	; 0x10
}
    118c:	60 96       	adiw	r28, 0x10	; 16
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <LED_enuMode2>:


/*
 *
*/
LED_tenuErrorStatus LED_enuMode2(void){
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	60 97       	sbiw	r28, 0x10	; 16
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
    11b2:	18 8a       	std	Y+16, r1	; 0x10
		u8 Local_u8Iterator;

		for (Local_u8Iterator = LED_u8_LED_ARRAY_INDEX; Local_u8Iterator >= 0; Local_u8Iterator--){
    11b4:	87 e0       	ldi	r24, 0x07	; 7
    11b6:	8f 87       	std	Y+15, r24	; 0x0f
			LED_enuTurnLedStatus(Local_u8Iterator, LED_u8_TURN_ON);
    11b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a0 e2       	ldi	r26, 0x20	; 32
    11c6:	b1 e4       	ldi	r27, 0x41	; 65
    11c8:	8b 87       	std	Y+11, r24	; 0x0b
    11ca:	9c 87       	std	Y+12, r25	; 0x0c
    11cc:	ad 87       	std	Y+13, r26	; 0x0d
    11ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	4a e7       	ldi	r20, 0x7A	; 122
    11de:	55 e4       	ldi	r21, 0x45	; 69
    11e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	8f 83       	std	Y+7, r24	; 0x07
    11ea:	98 87       	std	Y+8, r25	; 0x08
    11ec:	a9 87       	std	Y+9, r26	; 0x09
    11ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11f0:	6f 81       	ldd	r22, Y+7	; 0x07
    11f2:	78 85       	ldd	r23, Y+8	; 0x08
    11f4:	89 85       	ldd	r24, Y+9	; 0x09
    11f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e8       	ldi	r20, 0x80	; 128
    11fe:	5f e3       	ldi	r21, 0x3F	; 63
    1200:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1204:	88 23       	and	r24, r24
    1206:	2c f4       	brge	.+10     	; 0x1212 <LED_enuMode2+0x74>
		__ticks = 1;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	9e 83       	std	Y+6, r25	; 0x06
    120e:	8d 83       	std	Y+5, r24	; 0x05
    1210:	3f c0       	rjmp	.+126    	; 0x1290 <LED_enuMode2+0xf2>
	else if (__tmp > 65535)
    1212:	6f 81       	ldd	r22, Y+7	; 0x07
    1214:	78 85       	ldd	r23, Y+8	; 0x08
    1216:	89 85       	ldd	r24, Y+9	; 0x09
    1218:	9a 85       	ldd	r25, Y+10	; 0x0a
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	3f ef       	ldi	r19, 0xFF	; 255
    121e:	4f e7       	ldi	r20, 0x7F	; 127
    1220:	57 e4       	ldi	r21, 0x47	; 71
    1222:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1226:	18 16       	cp	r1, r24
    1228:	4c f5       	brge	.+82     	; 0x127c <LED_enuMode2+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122a:	6b 85       	ldd	r22, Y+11	; 0x0b
    122c:	7c 85       	ldd	r23, Y+12	; 0x0c
    122e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1230:	9e 85       	ldd	r25, Y+14	; 0x0e
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e2       	ldi	r20, 0x20	; 32
    1238:	51 e4       	ldi	r21, 0x41	; 65
    123a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	bc 01       	movw	r22, r24
    1244:	cd 01       	movw	r24, r26
    1246:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	9e 83       	std	Y+6, r25	; 0x06
    1250:	8d 83       	std	Y+5, r24	; 0x05
    1252:	0f c0       	rjmp	.+30     	; 0x1272 <LED_enuMode2+0xd4>
    1254:	80 e9       	ldi	r24, 0x90	; 144
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	9c 83       	std	Y+4, r25	; 0x04
    125a:	8b 83       	std	Y+3, r24	; 0x03
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <LED_enuMode2+0xc2>
    1264:	9c 83       	std	Y+4, r25	; 0x04
    1266:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	9e 83       	std	Y+6, r25	; 0x06
    1270:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1272:	8d 81       	ldd	r24, Y+5	; 0x05
    1274:	9e 81       	ldd	r25, Y+6	; 0x06
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	69 f7       	brne	.-38     	; 0x1254 <LED_enuMode2+0xb6>
    127a:	14 c0       	rjmp	.+40     	; 0x12a4 <LED_enuMode2+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127c:	6f 81       	ldd	r22, Y+7	; 0x07
    127e:	78 85       	ldd	r23, Y+8	; 0x08
    1280:	89 85       	ldd	r24, Y+9	; 0x09
    1282:	9a 85       	ldd	r25, Y+10	; 0x0a
    1284:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	9e 83       	std	Y+6, r25	; 0x06
    128e:	8d 83       	std	Y+5, r24	; 0x05
    1290:	8d 81       	ldd	r24, Y+5	; 0x05
    1292:	9e 81       	ldd	r25, Y+6	; 0x06
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <LED_enuMode2+0xfe>
    12a0:	9a 83       	std	Y+2, r25	; 0x02
    12a2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			LED_enuTurnLedStatus(Local_u8Iterator, LED_u8_TURN_OFF);
    12a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
*/
LED_tenuErrorStatus LED_enuMode2(void){
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
		u8 Local_u8Iterator;

		for (Local_u8Iterator = LED_u8_LED_ARRAY_INDEX; Local_u8Iterator >= 0; Local_u8Iterator--){
    12ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ae:	81 50       	subi	r24, 0x01	; 1
    12b0:	8f 87       	std	Y+15, r24	; 0x0f
    12b2:	82 cf       	rjmp	.-252    	; 0x11b8 <LED_enuMode2+0x1a>

000012b4 <LED_enuMode3>:


/*
 *
*/
LED_tenuErrorStatus LED_enuMode3(void){
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	6d 97       	sbiw	r28, 0x1d	; 29
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
    12c8:	1d 8e       	std	Y+29, r1	; 0x1d

		LED_enuTurnLedStatus(LED_u8_LED1, LED_u8_TURN_ON);
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED2, LED_u8_TURN_ON);
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	61 e0       	ldi	r22, 0x01	; 1
    12d6:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED3, LED_u8_TURN_ON);
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED4, LED_u8_TURN_ON);
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	61 e0       	ldi	r22, 0x01	; 1
    12e6:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED5, LED_u8_TURN_ON);
    12ea:	84 e0       	ldi	r24, 0x04	; 4
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED6, LED_u8_TURN_ON);
    12f2:	85 e0       	ldi	r24, 0x05	; 5
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED7, LED_u8_TURN_ON);
    12fa:	86 e0       	ldi	r24, 0x06	; 6
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED8, LED_u8_TURN_ON);
    1302:	87 e0       	ldi	r24, 0x07	; 7
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a8 e4       	ldi	r26, 0x48	; 72
    1310:	b2 e4       	ldi	r27, 0x42	; 66
    1312:	89 8f       	std	Y+25, r24	; 0x19
    1314:	9a 8f       	std	Y+26, r25	; 0x1a
    1316:	ab 8f       	std	Y+27, r26	; 0x1b
    1318:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131a:	69 8d       	ldd	r22, Y+25	; 0x19
    131c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    131e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	4a e7       	ldi	r20, 0x7A	; 122
    1328:	55 e4       	ldi	r21, 0x45	; 69
    132a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	8d 8b       	std	Y+21, r24	; 0x15
    1334:	9e 8b       	std	Y+22, r25	; 0x16
    1336:	af 8b       	std	Y+23, r26	; 0x17
    1338:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    133a:	6d 89       	ldd	r22, Y+21	; 0x15
    133c:	7e 89       	ldd	r23, Y+22	; 0x16
    133e:	8f 89       	ldd	r24, Y+23	; 0x17
    1340:	98 8d       	ldd	r25, Y+24	; 0x18
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e8       	ldi	r20, 0x80	; 128
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    134e:	88 23       	and	r24, r24
    1350:	2c f4       	brge	.+10     	; 0x135c <LED_enuMode3+0xa8>
		__ticks = 1;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9c 8b       	std	Y+20, r25	; 0x14
    1358:	8b 8b       	std	Y+19, r24	; 0x13
    135a:	3f c0       	rjmp	.+126    	; 0x13da <LED_enuMode3+0x126>
	else if (__tmp > 65535)
    135c:	6d 89       	ldd	r22, Y+21	; 0x15
    135e:	7e 89       	ldd	r23, Y+22	; 0x16
    1360:	8f 89       	ldd	r24, Y+23	; 0x17
    1362:	98 8d       	ldd	r25, Y+24	; 0x18
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	3f ef       	ldi	r19, 0xFF	; 255
    1368:	4f e7       	ldi	r20, 0x7F	; 127
    136a:	57 e4       	ldi	r21, 0x47	; 71
    136c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1370:	18 16       	cp	r1, r24
    1372:	4c f5       	brge	.+82     	; 0x13c6 <LED_enuMode3+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1374:	69 8d       	ldd	r22, Y+25	; 0x19
    1376:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1378:	8b 8d       	ldd	r24, Y+27	; 0x1b
    137a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e2       	ldi	r20, 0x20	; 32
    1382:	51 e4       	ldi	r21, 0x41	; 65
    1384:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9c 8b       	std	Y+20, r25	; 0x14
    139a:	8b 8b       	std	Y+19, r24	; 0x13
    139c:	0f c0       	rjmp	.+30     	; 0x13bc <LED_enuMode3+0x108>
    139e:	80 e9       	ldi	r24, 0x90	; 144
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	9a 8b       	std	Y+18, r25	; 0x12
    13a4:	89 8b       	std	Y+17, r24	; 0x11
    13a6:	89 89       	ldd	r24, Y+17	; 0x11
    13a8:	9a 89       	ldd	r25, Y+18	; 0x12
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <LED_enuMode3+0xf6>
    13ae:	9a 8b       	std	Y+18, r25	; 0x12
    13b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b2:	8b 89       	ldd	r24, Y+19	; 0x13
    13b4:	9c 89       	ldd	r25, Y+20	; 0x14
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	9c 8b       	std	Y+20, r25	; 0x14
    13ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13bc:	8b 89       	ldd	r24, Y+19	; 0x13
    13be:	9c 89       	ldd	r25, Y+20	; 0x14
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	69 f7       	brne	.-38     	; 0x139e <LED_enuMode3+0xea>
    13c4:	14 c0       	rjmp	.+40     	; 0x13ee <LED_enuMode3+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c6:	6d 89       	ldd	r22, Y+21	; 0x15
    13c8:	7e 89       	ldd	r23, Y+22	; 0x16
    13ca:	8f 89       	ldd	r24, Y+23	; 0x17
    13cc:	98 8d       	ldd	r25, Y+24	; 0x18
    13ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9c 8b       	std	Y+20, r25	; 0x14
    13d8:	8b 8b       	std	Y+19, r24	; 0x13
    13da:	8b 89       	ldd	r24, Y+19	; 0x13
    13dc:	9c 89       	ldd	r25, Y+20	; 0x14
    13de:	98 8b       	std	Y+16, r25	; 0x10
    13e0:	8f 87       	std	Y+15, r24	; 0x0f
    13e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e4:	98 89       	ldd	r25, Y+16	; 0x10
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <LED_enuMode3+0x132>
    13ea:	98 8b       	std	Y+16, r25	; 0x10
    13ec:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		LED_enuTurnLedStatus(LED_u8_LED1, LED_u8_TURN_OFF);
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED2, LED_u8_TURN_OFF);
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED3, LED_u8_TURN_OFF);
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED4, LED_u8_TURN_OFF);
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED5, LED_u8_TURN_OFF);
    140e:	84 e0       	ldi	r24, 0x04	; 4
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED6, LED_u8_TURN_OFF);
    1416:	85 e0       	ldi	r24, 0x05	; 5
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED7, LED_u8_TURN_OFF);
    141e:	86 e0       	ldi	r24, 0x06	; 6
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(LED_u8_LED8, LED_u8_TURN_OFF);
    1426:	87 e0       	ldi	r24, 0x07	; 7
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a8 e4       	ldi	r26, 0x48	; 72
    1434:	b2 e4       	ldi	r27, 0x42	; 66
    1436:	8b 87       	std	Y+11, r24	; 0x0b
    1438:	9c 87       	std	Y+12, r25	; 0x0c
    143a:	ad 87       	std	Y+13, r26	; 0x0d
    143c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1440:	7c 85       	ldd	r23, Y+12	; 0x0c
    1442:	8d 85       	ldd	r24, Y+13	; 0x0d
    1444:	9e 85       	ldd	r25, Y+14	; 0x0e
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4a e7       	ldi	r20, 0x7A	; 122
    144c:	55 e4       	ldi	r21, 0x45	; 69
    144e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	8f 83       	std	Y+7, r24	; 0x07
    1458:	98 87       	std	Y+8, r25	; 0x08
    145a:	a9 87       	std	Y+9, r26	; 0x09
    145c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    145e:	6f 81       	ldd	r22, Y+7	; 0x07
    1460:	78 85       	ldd	r23, Y+8	; 0x08
    1462:	89 85       	ldd	r24, Y+9	; 0x09
    1464:	9a 85       	ldd	r25, Y+10	; 0x0a
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e8       	ldi	r20, 0x80	; 128
    146c:	5f e3       	ldi	r21, 0x3F	; 63
    146e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1472:	88 23       	and	r24, r24
    1474:	2c f4       	brge	.+10     	; 0x1480 <LED_enuMode3+0x1cc>
		__ticks = 1;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	9e 83       	std	Y+6, r25	; 0x06
    147c:	8d 83       	std	Y+5, r24	; 0x05
    147e:	3f c0       	rjmp	.+126    	; 0x14fe <LED_enuMode3+0x24a>
	else if (__tmp > 65535)
    1480:	6f 81       	ldd	r22, Y+7	; 0x07
    1482:	78 85       	ldd	r23, Y+8	; 0x08
    1484:	89 85       	ldd	r24, Y+9	; 0x09
    1486:	9a 85       	ldd	r25, Y+10	; 0x0a
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	3f ef       	ldi	r19, 0xFF	; 255
    148c:	4f e7       	ldi	r20, 0x7F	; 127
    148e:	57 e4       	ldi	r21, 0x47	; 71
    1490:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1494:	18 16       	cp	r1, r24
    1496:	4c f5       	brge	.+82     	; 0x14ea <LED_enuMode3+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1498:	6b 85       	ldd	r22, Y+11	; 0x0b
    149a:	7c 85       	ldd	r23, Y+12	; 0x0c
    149c:	8d 85       	ldd	r24, Y+13	; 0x0d
    149e:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e2       	ldi	r20, 0x20	; 32
    14a6:	51 e4       	ldi	r21, 0x41	; 65
    14a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
    14c0:	0f c0       	rjmp	.+30     	; 0x14e0 <LED_enuMode3+0x22c>
    14c2:	80 e9       	ldi	r24, 0x90	; 144
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	9c 83       	std	Y+4, r25	; 0x04
    14c8:	8b 83       	std	Y+3, r24	; 0x03
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <LED_enuMode3+0x21a>
    14d2:	9c 83       	std	Y+4, r25	; 0x04
    14d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	9e 83       	std	Y+6, r25	; 0x06
    14de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	9e 81       	ldd	r25, Y+6	; 0x06
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	69 f7       	brne	.-38     	; 0x14c2 <LED_enuMode3+0x20e>
    14e8:	14 c0       	rjmp	.+40     	; 0x1512 <LED_enuMode3+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ea:	6f 81       	ldd	r22, Y+7	; 0x07
    14ec:	78 85       	ldd	r23, Y+8	; 0x08
    14ee:	89 85       	ldd	r24, Y+9	; 0x09
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	9e 83       	std	Y+6, r25	; 0x06
    14fc:	8d 83       	std	Y+5, r24	; 0x05
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <LED_enuMode3+0x256>
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);

		return Local_enuErrorStatus;
    1512:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1514:	6d 96       	adiw	r28, 0x1d	; 29
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <LED_enuMode4>:


/*
 *
*/
LED_tenuErrorStatus LED_enuMode4(void){
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	61 97       	sbiw	r28, 0x11	; 17
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
    153a:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8Iterator;
	u8 Local_u8Incriment = LED_u8_LED_ARRAY_INDEX;
    153c:	87 e0       	ldi	r24, 0x07	; 7
    153e:	8f 87       	std	Y+15, r24	; 0x0f

	for (Local_u8Iterator = 0; Local_u8Iterator < (LED_u8_LED_NUMBER/2); Local_u8Iterator++){
    1540:	18 8a       	std	Y+16, r1	; 0x10
    1542:	88 c0       	rjmp	.+272    	; 0x1654 <LED_enuMode4+0x12e>
		LED_enuTurnLedStatus(Local_u8Iterator, LED_u8_TURN_ON);
    1544:	88 89       	ldd	r24, Y+16	; 0x10
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(Local_u8Incriment, LED_u8_TURN_ON);
    154c:	8f 85       	ldd	r24, Y+15	; 0x0f
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	a8 e4       	ldi	r26, 0x48	; 72
    155a:	b2 e4       	ldi	r27, 0x42	; 66
    155c:	8b 87       	std	Y+11, r24	; 0x0b
    155e:	9c 87       	std	Y+12, r25	; 0x0c
    1560:	ad 87       	std	Y+13, r26	; 0x0d
    1562:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1564:	6b 85       	ldd	r22, Y+11	; 0x0b
    1566:	7c 85       	ldd	r23, Y+12	; 0x0c
    1568:	8d 85       	ldd	r24, Y+13	; 0x0d
    156a:	9e 85       	ldd	r25, Y+14	; 0x0e
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	4a e7       	ldi	r20, 0x7A	; 122
    1572:	55 e4       	ldi	r21, 0x45	; 69
    1574:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	8f 83       	std	Y+7, r24	; 0x07
    157e:	98 87       	std	Y+8, r25	; 0x08
    1580:	a9 87       	std	Y+9, r26	; 0x09
    1582:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1584:	6f 81       	ldd	r22, Y+7	; 0x07
    1586:	78 85       	ldd	r23, Y+8	; 0x08
    1588:	89 85       	ldd	r24, Y+9	; 0x09
    158a:	9a 85       	ldd	r25, Y+10	; 0x0a
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e8       	ldi	r20, 0x80	; 128
    1592:	5f e3       	ldi	r21, 0x3F	; 63
    1594:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1598:	88 23       	and	r24, r24
    159a:	2c f4       	brge	.+10     	; 0x15a6 <LED_enuMode4+0x80>
		__ticks = 1;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	3f c0       	rjmp	.+126    	; 0x1624 <LED_enuMode4+0xfe>
	else if (__tmp > 65535)
    15a6:	6f 81       	ldd	r22, Y+7	; 0x07
    15a8:	78 85       	ldd	r23, Y+8	; 0x08
    15aa:	89 85       	ldd	r24, Y+9	; 0x09
    15ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	3f ef       	ldi	r19, 0xFF	; 255
    15b2:	4f e7       	ldi	r20, 0x7F	; 127
    15b4:	57 e4       	ldi	r21, 0x47	; 71
    15b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15ba:	18 16       	cp	r1, r24
    15bc:	4c f5       	brge	.+82     	; 0x1610 <LED_enuMode4+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15be:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e2       	ldi	r20, 0x20	; 32
    15cc:	51 e4       	ldi	r21, 0x41	; 65
    15ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	bc 01       	movw	r22, r24
    15d8:	cd 01       	movw	r24, r26
    15da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	9e 83       	std	Y+6, r25	; 0x06
    15e4:	8d 83       	std	Y+5, r24	; 0x05
    15e6:	0f c0       	rjmp	.+30     	; 0x1606 <LED_enuMode4+0xe0>
    15e8:	80 e9       	ldi	r24, 0x90	; 144
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	9c 83       	std	Y+4, r25	; 0x04
    15ee:	8b 83       	std	Y+3, r24	; 0x03
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <LED_enuMode4+0xce>
    15f8:	9c 83       	std	Y+4, r25	; 0x04
    15fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	69 f7       	brne	.-38     	; 0x15e8 <LED_enuMode4+0xc2>
    160e:	14 c0       	rjmp	.+40     	; 0x1638 <LED_enuMode4+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1610:	6f 81       	ldd	r22, Y+7	; 0x07
    1612:	78 85       	ldd	r23, Y+8	; 0x08
    1614:	89 85       	ldd	r24, Y+9	; 0x09
    1616:	9a 85       	ldd	r25, Y+10	; 0x0a
    1618:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9e 83       	std	Y+6, r25	; 0x06
    1622:	8d 83       	std	Y+5, r24	; 0x05
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <LED_enuMode4+0x10a>
    1634:	9a 83       	std	Y+2, r25	; 0x02
    1636:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		LED_enuTurnLedStatus(Local_u8Iterator, LED_u8_TURN_OFF);
    1638:	88 89       	ldd	r24, Y+16	; 0x10
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(Local_u8Incriment, LED_u8_TURN_OFF);
    1640:	8f 85       	ldd	r24, Y+15	; 0x0f
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		Local_u8Incriment--;
    1648:	8f 85       	ldd	r24, Y+15	; 0x0f
    164a:	81 50       	subi	r24, 0x01	; 1
    164c:	8f 87       	std	Y+15, r24	; 0x0f
LED_tenuErrorStatus LED_enuMode4(void){
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
	u8 Local_u8Iterator;
	u8 Local_u8Incriment = LED_u8_LED_ARRAY_INDEX;

	for (Local_u8Iterator = 0; Local_u8Iterator < (LED_u8_LED_NUMBER/2); Local_u8Iterator++){
    164e:	88 89       	ldd	r24, Y+16	; 0x10
    1650:	8f 5f       	subi	r24, 0xFF	; 255
    1652:	88 8b       	std	Y+16, r24	; 0x10
    1654:	88 89       	ldd	r24, Y+16	; 0x10
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	08 f4       	brcc	.+2      	; 0x165c <LED_enuMode4+0x136>
    165a:	74 cf       	rjmp	.-280    	; 0x1544 <LED_enuMode4+0x1e>
		LED_enuTurnLedStatus(Local_u8Iterator, LED_u8_TURN_OFF);
		LED_enuTurnLedStatus(Local_u8Incriment, LED_u8_TURN_OFF);
		Local_u8Incriment--;
	}

	return Local_enuErrorStatus;
    165c:	89 89       	ldd	r24, Y+17	; 0x11
}
    165e:	61 96       	adiw	r28, 0x11	; 17
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <LED_enuMode5>:


/*
 *
*/
LED_tenuErrorStatus LED_enuMode5(void){
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	61 97       	sbiw	r28, 0x11	; 17
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
    1684:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8Iterator;
	u8 Local_u8Decriment = LED_u8_LED_NUMBER/2;
    1686:	84 e0       	ldi	r24, 0x04	; 4
    1688:	8f 87       	std	Y+15, r24	; 0x0f

	for (Local_u8Iterator = ((LED_u8_LED_NUMBER/2)-1); Local_u8Iterator >= 0; Local_u8Iterator--){
    168a:	83 e0       	ldi	r24, 0x03	; 3
    168c:	88 8b       	std	Y+16, r24	; 0x10
		LED_enuTurnLedStatus(Local_u8Iterator, LED_u8_TURN_ON);
    168e:	88 89       	ldd	r24, Y+16	; 0x10
    1690:	61 e0       	ldi	r22, 0x01	; 1
    1692:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(Local_u8Decriment, LED_u8_TURN_ON);
    1696:	8f 85       	ldd	r24, Y+15	; 0x0f
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a8 e4       	ldi	r26, 0x48	; 72
    16a4:	b2 e4       	ldi	r27, 0x42	; 66
    16a6:	8b 87       	std	Y+11, r24	; 0x0b
    16a8:	9c 87       	std	Y+12, r25	; 0x0c
    16aa:	ad 87       	std	Y+13, r26	; 0x0d
    16ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	4a e7       	ldi	r20, 0x7A	; 122
    16bc:	55 e4       	ldi	r21, 0x45	; 69
    16be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	8f 83       	std	Y+7, r24	; 0x07
    16c8:	98 87       	std	Y+8, r25	; 0x08
    16ca:	a9 87       	std	Y+9, r26	; 0x09
    16cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e8       	ldi	r20, 0x80	; 128
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16e2:	88 23       	and	r24, r24
    16e4:	2c f4       	brge	.+10     	; 0x16f0 <LED_enuMode5+0x80>
		__ticks = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	3f c0       	rjmp	.+126    	; 0x176e <LED_enuMode5+0xfe>
	else if (__tmp > 65535)
    16f0:	6f 81       	ldd	r22, Y+7	; 0x07
    16f2:	78 85       	ldd	r23, Y+8	; 0x08
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	3f ef       	ldi	r19, 0xFF	; 255
    16fc:	4f e7       	ldi	r20, 0x7F	; 127
    16fe:	57 e4       	ldi	r21, 0x47	; 71
    1700:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1704:	18 16       	cp	r1, r24
    1706:	4c f5       	brge	.+82     	; 0x175a <LED_enuMode5+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1708:	6b 85       	ldd	r22, Y+11	; 0x0b
    170a:	7c 85       	ldd	r23, Y+12	; 0x0c
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e2       	ldi	r20, 0x20	; 32
    1716:	51 e4       	ldi	r21, 0x41	; 65
    1718:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	0f c0       	rjmp	.+30     	; 0x1750 <LED_enuMode5+0xe0>
    1732:	80 e9       	ldi	r24, 0x90	; 144
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <LED_enuMode5+0xce>
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	69 f7       	brne	.-38     	; 0x1732 <LED_enuMode5+0xc2>
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <LED_enuMode5+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175a:	6f 81       	ldd	r22, Y+7	; 0x07
    175c:	78 85       	ldd	r23, Y+8	; 0x08
    175e:	89 85       	ldd	r24, Y+9	; 0x09
    1760:	9a 85       	ldd	r25, Y+10	; 0x0a
    1762:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <LED_enuMode5+0x10a>
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		LED_enuTurnLedStatus(Local_u8Iterator, LED_u8_TURN_OFF);
    1782:	88 89       	ldd	r24, Y+16	; 0x10
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		LED_enuTurnLedStatus(Local_u8Decriment, LED_u8_TURN_OFF);
    178a:	8f 85       	ldd	r24, Y+15	; 0x0f
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	0e 94 07 08 	call	0x100e	; 0x100e <LED_enuTurnLedStatus>
		Local_u8Decriment++;
    1792:	8f 85       	ldd	r24, Y+15	; 0x0f
    1794:	8f 5f       	subi	r24, 0xFF	; 255
    1796:	8f 87       	std	Y+15, r24	; 0x0f
LED_tenuErrorStatus LED_enuMode5(void){
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
	u8 Local_u8Iterator;
	u8 Local_u8Decriment = LED_u8_LED_NUMBER/2;

	for (Local_u8Iterator = ((LED_u8_LED_NUMBER/2)-1); Local_u8Iterator >= 0; Local_u8Iterator--){
    1798:	88 89       	ldd	r24, Y+16	; 0x10
    179a:	81 50       	subi	r24, 0x01	; 1
    179c:	88 8b       	std	Y+16, r24	; 0x10
    179e:	77 cf       	rjmp	.-274    	; 0x168e <LED_enuMode5+0x1e>

000017a0 <LCD_vidInit>:
 * Name: LCD_vidInit
 * Description: Initialize the LCD ... According to DATASHEET instruction
 * Arguments: void
 * Return:	void
 */
void LCD_vidInit(void){
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	e8 97       	sbiw	r28, 0x38	; 56
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
	DIO_vidInit();
    17b4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidInit>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	b2 e4       	ldi	r27, 0x42	; 66
    17c0:	8d ab       	std	Y+53, r24	; 0x35
    17c2:	9e ab       	std	Y+54, r25	; 0x36
    17c4:	af ab       	std	Y+55, r26	; 0x37
    17c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c8:	6d a9       	ldd	r22, Y+53	; 0x35
    17ca:	7e a9       	ldd	r23, Y+54	; 0x36
    17cc:	8f a9       	ldd	r24, Y+55	; 0x37
    17ce:	98 ad       	ldd	r25, Y+56	; 0x38
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4a e7       	ldi	r20, 0x7A	; 122
    17d6:	55 e4       	ldi	r21, 0x45	; 69
    17d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	89 ab       	std	Y+49, r24	; 0x31
    17e2:	9a ab       	std	Y+50, r25	; 0x32
    17e4:	ab ab       	std	Y+51, r26	; 0x33
    17e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17e8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ea:	7a a9       	ldd	r23, Y+50	; 0x32
    17ec:	8b a9       	ldd	r24, Y+51	; 0x33
    17ee:	9c a9       	ldd	r25, Y+52	; 0x34
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	2c f4       	brge	.+10     	; 0x180a <LCD_vidInit+0x6a>
		__ticks = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	98 ab       	std	Y+48, r25	; 0x30
    1806:	8f a7       	std	Y+47, r24	; 0x2f
    1808:	3f c0       	rjmp	.+126    	; 0x1888 <LCD_vidInit+0xe8>
	else if (__tmp > 65535)
    180a:	69 a9       	ldd	r22, Y+49	; 0x31
    180c:	7a a9       	ldd	r23, Y+50	; 0x32
    180e:	8b a9       	ldd	r24, Y+51	; 0x33
    1810:	9c a9       	ldd	r25, Y+52	; 0x34
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	4c f5       	brge	.+82     	; 0x1874 <LCD_vidInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1822:	6d a9       	ldd	r22, Y+53	; 0x35
    1824:	7e a9       	ldd	r23, Y+54	; 0x36
    1826:	8f a9       	ldd	r24, Y+55	; 0x37
    1828:	98 ad       	ldd	r25, Y+56	; 0x38
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e2       	ldi	r20, 0x20	; 32
    1830:	51 e4       	ldi	r21, 0x41	; 65
    1832:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	98 ab       	std	Y+48, r25	; 0x30
    1848:	8f a7       	std	Y+47, r24	; 0x2f
    184a:	0f c0       	rjmp	.+30     	; 0x186a <LCD_vidInit+0xca>
    184c:	80 e9       	ldi	r24, 0x90	; 144
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	9e a7       	std	Y+46, r25	; 0x2e
    1852:	8d a7       	std	Y+45, r24	; 0x2d
    1854:	8d a5       	ldd	r24, Y+45	; 0x2d
    1856:	9e a5       	ldd	r25, Y+46	; 0x2e
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <LCD_vidInit+0xb8>
    185c:	9e a7       	std	Y+46, r25	; 0x2e
    185e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1860:	8f a5       	ldd	r24, Y+47	; 0x2f
    1862:	98 a9       	ldd	r25, Y+48	; 0x30
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	98 ab       	std	Y+48, r25	; 0x30
    1868:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	8f a5       	ldd	r24, Y+47	; 0x2f
    186c:	98 a9       	ldd	r25, Y+48	; 0x30
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	69 f7       	brne	.-38     	; 0x184c <LCD_vidInit+0xac>
    1872:	14 c0       	rjmp	.+40     	; 0x189c <LCD_vidInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1874:	69 a9       	ldd	r22, Y+49	; 0x31
    1876:	7a a9       	ldd	r23, Y+50	; 0x32
    1878:	8b a9       	ldd	r24, Y+51	; 0x33
    187a:	9c a9       	ldd	r25, Y+52	; 0x34
    187c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	98 ab       	std	Y+48, r25	; 0x30
    1886:	8f a7       	std	Y+47, r24	; 0x2f
    1888:	8f a5       	ldd	r24, Y+47	; 0x2f
    188a:	98 a9       	ldd	r25, Y+48	; 0x30
    188c:	9c a7       	std	Y+44, r25	; 0x2c
    188e:	8b a7       	std	Y+43, r24	; 0x2b
    1890:	8b a5       	ldd	r24, Y+43	; 0x2b
    1892:	9c a5       	ldd	r25, Y+44	; 0x2c
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <LCD_vidInit+0xf4>
    1898:	9c a7       	std	Y+44, r25	; 0x2c
    189a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(32);
	/*Function Set*/
	LCD_enuSendInstruction(LCD_u8_FUNCTION_SET);
    189c:	88 e3       	ldi	r24, 0x38	; 56
    189e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_enuSendInstruction>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a0 e8       	ldi	r26, 0x80	; 128
    18a8:	bf e3       	ldi	r27, 0x3F	; 63
    18aa:	8f a3       	std	Y+39, r24	; 0x27
    18ac:	98 a7       	std	Y+40, r25	; 0x28
    18ae:	a9 a7       	std	Y+41, r26	; 0x29
    18b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	6f a1       	ldd	r22, Y+39	; 0x27
    18b4:	78 a5       	ldd	r23, Y+40	; 0x28
    18b6:	89 a5       	ldd	r24, Y+41	; 0x29
    18b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	4a e7       	ldi	r20, 0x7A	; 122
    18c0:	55 e4       	ldi	r21, 0x45	; 69
    18c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	8b a3       	std	Y+35, r24	; 0x23
    18cc:	9c a3       	std	Y+36, r25	; 0x24
    18ce:	ad a3       	std	Y+37, r26	; 0x25
    18d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18d2:	6b a1       	ldd	r22, Y+35	; 0x23
    18d4:	7c a1       	ldd	r23, Y+36	; 0x24
    18d6:	8d a1       	ldd	r24, Y+37	; 0x25
    18d8:	9e a1       	ldd	r25, Y+38	; 0x26
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <LCD_vidInit+0x154>
		__ticks = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9a a3       	std	Y+34, r25	; 0x22
    18f0:	89 a3       	std	Y+33, r24	; 0x21
    18f2:	3f c0       	rjmp	.+126    	; 0x1972 <LCD_vidInit+0x1d2>
	else if (__tmp > 65535)
    18f4:	6b a1       	ldd	r22, Y+35	; 0x23
    18f6:	7c a1       	ldd	r23, Y+36	; 0x24
    18f8:	8d a1       	ldd	r24, Y+37	; 0x25
    18fa:	9e a1       	ldd	r25, Y+38	; 0x26
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3f ef       	ldi	r19, 0xFF	; 255
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	57 e4       	ldi	r21, 0x47	; 71
    1904:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1908:	18 16       	cp	r1, r24
    190a:	4c f5       	brge	.+82     	; 0x195e <LCD_vidInit+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	6f a1       	ldd	r22, Y+39	; 0x27
    190e:	78 a5       	ldd	r23, Y+40	; 0x28
    1910:	89 a5       	ldd	r24, Y+41	; 0x29
    1912:	9a a5       	ldd	r25, Y+42	; 0x2a
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e2       	ldi	r20, 0x20	; 32
    191a:	51 e4       	ldi	r21, 0x41	; 65
    191c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9a a3       	std	Y+34, r25	; 0x22
    1932:	89 a3       	std	Y+33, r24	; 0x21
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <LCD_vidInit+0x1b4>
    1936:	80 e9       	ldi	r24, 0x90	; 144
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	98 a3       	std	Y+32, r25	; 0x20
    193c:	8f 8f       	std	Y+31, r24	; 0x1f
    193e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1940:	98 a1       	ldd	r25, Y+32	; 0x20
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_vidInit+0x1a2>
    1946:	98 a3       	std	Y+32, r25	; 0x20
    1948:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	89 a1       	ldd	r24, Y+33	; 0x21
    194c:	9a a1       	ldd	r25, Y+34	; 0x22
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	9a a3       	std	Y+34, r25	; 0x22
    1952:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1954:	89 a1       	ldd	r24, Y+33	; 0x21
    1956:	9a a1       	ldd	r25, Y+34	; 0x22
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	69 f7       	brne	.-38     	; 0x1936 <LCD_vidInit+0x196>
    195c:	14 c0       	rjmp	.+40     	; 0x1986 <LCD_vidInit+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195e:	6b a1       	ldd	r22, Y+35	; 0x23
    1960:	7c a1       	ldd	r23, Y+36	; 0x24
    1962:	8d a1       	ldd	r24, Y+37	; 0x25
    1964:	9e a1       	ldd	r25, Y+38	; 0x26
    1966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9a a3       	std	Y+34, r25	; 0x22
    1970:	89 a3       	std	Y+33, r24	; 0x21
    1972:	89 a1       	ldd	r24, Y+33	; 0x21
    1974:	9a a1       	ldd	r25, Y+34	; 0x22
    1976:	9e 8f       	std	Y+30, r25	; 0x1e
    1978:	8d 8f       	std	Y+29, r24	; 0x1d
    197a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    197c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <LCD_vidInit+0x1de>
    1982:	9e 8f       	std	Y+30, r25	; 0x1e
    1984:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);

	/*Display Control*/
	LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_OFF);
    1986:	8c e0       	ldi	r24, 0x0C	; 12
    1988:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_enuSendInstruction>
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a0 e8       	ldi	r26, 0x80	; 128
    1992:	bf e3       	ldi	r27, 0x3F	; 63
    1994:	89 8f       	std	Y+25, r24	; 0x19
    1996:	9a 8f       	std	Y+26, r25	; 0x1a
    1998:	ab 8f       	std	Y+27, r26	; 0x1b
    199a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199c:	69 8d       	ldd	r22, Y+25	; 0x19
    199e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4a e7       	ldi	r20, 0x7A	; 122
    19aa:	55 e4       	ldi	r21, 0x45	; 69
    19ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8d 8b       	std	Y+21, r24	; 0x15
    19b6:	9e 8b       	std	Y+22, r25	; 0x16
    19b8:	af 8b       	std	Y+23, r26	; 0x17
    19ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19bc:	6d 89       	ldd	r22, Y+21	; 0x15
    19be:	7e 89       	ldd	r23, Y+22	; 0x16
    19c0:	8f 89       	ldd	r24, Y+23	; 0x17
    19c2:	98 8d       	ldd	r25, Y+24	; 0x18
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e8       	ldi	r20, 0x80	; 128
    19ca:	5f e3       	ldi	r21, 0x3F	; 63
    19cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19d0:	88 23       	and	r24, r24
    19d2:	2c f4       	brge	.+10     	; 0x19de <LCD_vidInit+0x23e>
		__ticks = 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9c 8b       	std	Y+20, r25	; 0x14
    19da:	8b 8b       	std	Y+19, r24	; 0x13
    19dc:	3f c0       	rjmp	.+126    	; 0x1a5c <LCD_vidInit+0x2bc>
	else if (__tmp > 65535)
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	3f ef       	ldi	r19, 0xFF	; 255
    19ea:	4f e7       	ldi	r20, 0x7F	; 127
    19ec:	57 e4       	ldi	r21, 0x47	; 71
    19ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19f2:	18 16       	cp	r1, r24
    19f4:	4c f5       	brge	.+82     	; 0x1a48 <LCD_vidInit+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f6:	69 8d       	ldd	r22, Y+25	; 0x19
    19f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e2       	ldi	r20, 0x20	; 32
    1a04:	51 e4       	ldi	r21, 0x41	; 65
    1a06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	9c 8b       	std	Y+20, r25	; 0x14
    1a1c:	8b 8b       	std	Y+19, r24	; 0x13
    1a1e:	0f c0       	rjmp	.+30     	; 0x1a3e <LCD_vidInit+0x29e>
    1a20:	80 e9       	ldi	r24, 0x90	; 144
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	9a 8b       	std	Y+18, r25	; 0x12
    1a26:	89 8b       	std	Y+17, r24	; 0x11
    1a28:	89 89       	ldd	r24, Y+17	; 0x11
    1a2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_vidInit+0x28c>
    1a30:	9a 8b       	std	Y+18, r25	; 0x12
    1a32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a34:	8b 89       	ldd	r24, Y+19	; 0x13
    1a36:	9c 89       	ldd	r25, Y+20	; 0x14
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	9c 8b       	std	Y+20, r25	; 0x14
    1a3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a40:	9c 89       	ldd	r25, Y+20	; 0x14
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	69 f7       	brne	.-38     	; 0x1a20 <LCD_vidInit+0x280>
    1a46:	14 c0       	rjmp	.+40     	; 0x1a70 <LCD_vidInit+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a48:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9c 8b       	std	Y+20, r25	; 0x14
    1a5a:	8b 8b       	std	Y+19, r24	; 0x13
    1a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a60:	98 8b       	std	Y+16, r25	; 0x10
    1a62:	8f 87       	std	Y+15, r24	; 0x0f
    1a64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a66:	98 89       	ldd	r25, Y+16	; 0x10
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <LCD_vidInit+0x2c8>
    1a6c:	98 8b       	std	Y+16, r25	; 0x10
    1a6e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	/*Display Clear*/
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_enuSendInstruction>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a0 e0       	ldi	r26, 0x00	; 0
    1a7c:	b0 e4       	ldi	r27, 0x40	; 64
    1a7e:	8b 87       	std	Y+11, r24	; 0x0b
    1a80:	9c 87       	std	Y+12, r25	; 0x0c
    1a82:	ad 87       	std	Y+13, r26	; 0x0d
    1a84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a e7       	ldi	r20, 0x7A	; 122
    1a94:	55 e4       	ldi	r21, 0x45	; 69
    1a96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	8f 83       	std	Y+7, r24	; 0x07
    1aa0:	98 87       	std	Y+8, r25	; 0x08
    1aa2:	a9 87       	std	Y+9, r26	; 0x09
    1aa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa8:	78 85       	ldd	r23, Y+8	; 0x08
    1aaa:	89 85       	ldd	r24, Y+9	; 0x09
    1aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <LCD_vidInit+0x328>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
    1ac6:	3f c0       	rjmp	.+126    	; 0x1b46 <LCD_vidInit+0x3a6>
	else if (__tmp > 65535)
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	57 e4       	ldi	r21, 0x47	; 71
    1ad8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	4c f5       	brge	.+82     	; 0x1b32 <LCD_vidInit+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9e 83       	std	Y+6, r25	; 0x06
    1b06:	8d 83       	std	Y+5, r24	; 0x05
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <LCD_vidInit+0x388>
    1b0a:	80 e9       	ldi	r24, 0x90	; 144
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	9c 83       	std	Y+4, r25	; 0x04
    1b10:	8b 83       	std	Y+3, r24	; 0x03
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_vidInit+0x376>
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	69 f7       	brne	.-38     	; 0x1b0a <LCD_vidInit+0x36a>
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <LCD_vidInit+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b32:	6f 81       	ldd	r22, Y+7	; 0x07
    1b34:	78 85       	ldd	r23, Y+8	; 0x08
    1b36:	89 85       	ldd	r24, Y+9	; 0x09
    1b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_vidInit+0x3b2>
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	/*Entry Mode Set*/
	LCD_enuSendInstruction(LCD_u8_CURSOR_INC_SHIFT_OFF);
    1b5a:	86 e0       	ldi	r24, 0x06	; 6
    1b5c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_enuSendInstruction>
}
    1b60:	e8 96       	adiw	r28, 0x38	; 56
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <LCD_enuSendInstruction>:
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 LCD_u8_SHIFT_CURSOR_RIGHT, LCD_u8_SHIFT_DISPLAY_LEFT,
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 LCD_u8_SHIFT_DISPLAY_RIGHT, LCD_u8_FUNCTION_SET,
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 LCD_u8_FIRST_CGRAM_ADDRESS, LCD_u8_FIRST_DDRAM_ADDRESS)
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus LCD_enuSendInstruction(u8 Copy_u8Instruction){
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <LCD_enuSendInstruction+0x6>
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    1b7e:	19 82       	std	Y+1, r1	; 0x01
	if(0) {
		Local_enuErrorStatus = LCD_NOK;
	} else {
	/*****IMPLEMENTATION*****/
		/*RS PIN --------> low*/
		DIO_enuSetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	62 e0       	ldi	r22, 0x02	; 2
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_enuSetPinValue>

		/*RW PIN --------> low*/
		DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_enuSetPinValue>

		/*Send instruction*/		// set port()*1 OR set pin()*8
		DIO_enuSetPortValue(LCD_u8_DATA_PORT, Copy_u8Instruction);
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	6a 81       	ldd	r22, Y+2	; 0x02
    1b98:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_enuSetPortValue>

		/*Send enable*/
		LCD_SendEnable();
    1b9c:	0e 94 41 10 	call	0x2082	; 0x2082 <LCD_SendEnable>
	}

	return Local_enuErrorStatus;
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <LCD_enuSendCharacter>:
 * Name: LCD_enuSendCharacter
 * Description: Send a character to display on the LCD
 * Arguments:	Copy_u8Character				OPTIONS --> (Any character its ascii code exist in the CG ROM)
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus LCD_enuSendCharacter(u8 Copy_u8Character){
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <LCD_enuSendCharacter+0x6>
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	8a 83       	std	Y+2, r24	; 0x02
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    1bb8:	19 82       	std	Y+1, r1	; 0x01

	/*****IMPLEMENTATION*****/
	/*RS PIN --------> low*/
	DIO_enuSetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_HIGH);
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	62 e0       	ldi	r22, 0x02	; 2
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_enuSetPinValue>

	/*RW PIN --------> high*/
	DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_enuSetPinValue>

	/*Send Data*/
	DIO_enuSetPortValue(LCD_u8_DATA_PORT, Copy_u8Character);
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	6a 81       	ldd	r22, Y+2	; 0x02
    1bd2:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_enuSetPortValue>

	/*Send enable*/
	LCD_SendEnable();
    1bd6:	0e 94 41 10 	call	0x2082	; 0x2082 <LCD_SendEnable>

	return Local_enuErrorStatus;
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <LCD_enuSendString>:
 * Name: LCD_enuSendString
 * Description: Send a string to display it on the LCD
 * Arguments: Add_pu8String	--------> pointer refer to the first address of the string array
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus LCD_enuSendString(u8* Add_pu8String){
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <LCD_enuSendString+0x6>
    1bec:	0f 92       	push	r0
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	9b 83       	std	Y+3, r25	; 0x03
    1bf4:	8a 83       	std	Y+2, r24	; 0x02
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    1bf6:	19 82       	std	Y+1, r1	; 0x01

	/*check arguments*/
	if(Add_pu8String == NULL){
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	69 f4       	brne	.+26     	; 0x1c1a <LCD_enuSendString+0x34>
		Local_enuErrorStatus = LCD_NOK;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	0f c0       	rjmp	.+30     	; 0x1c24 <LCD_enuSendString+0x3e>
	} else {
	/*****IMPLEMENTATION*****/
		while (*Add_pu8String != '\0'){
			LCD_enuSendCharacter(*Add_pu8String);
    1c06:	ea 81       	ldd	r30, Y+2	; 0x02
    1c08:	fb 81       	ldd	r31, Y+3	; 0x03
    1c0a:	80 81       	ld	r24, Z
    1c0c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_enuSendCharacter>
			Add_pu8String++;
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	9b 81       	ldd	r25, Y+3	; 0x03
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	9b 83       	std	Y+3, r25	; 0x03
    1c18:	8a 83       	std	Y+2, r24	; 0x02
	/*check arguments*/
	if(Add_pu8String == NULL){
		Local_enuErrorStatus = LCD_NOK;
	} else {
	/*****IMPLEMENTATION*****/
		while (*Add_pu8String != '\0'){
    1c1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c1e:	80 81       	ld	r24, Z
    1c20:	88 23       	and	r24, r24
    1c22:	89 f7       	brne	.-30     	; 0x1c06 <LCD_enuSendString+0x20>
			LCD_enuSendCharacter(*Add_pu8String);
			Add_pu8String++;
		}
	}

	return Local_enuErrorStatus;
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <LCD_enuGoTo>:
 * Description: Make the AC point to specific address
 * Arguments:	first Argument:		Copy_u8Row,				options (LCD_u8_ROW0, LCD_u8_ROW1)
 * 				second Argument: 	Copy_u8Column, 			options (LCD_u8_COLUMN0 : LCD_u8_COLUMN15)
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus LCD_enuGoTo(u8 Copy_u8Row, u8 Copy_u8Column){
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <LCD_enuGoTo+0x6>
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <LCD_enuGoTo+0x8>
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	8a 83       	std	Y+2, r24	; 0x02
    1c42:	6b 83       	std	Y+3, r22	; 0x03
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    1c44:	19 82       	std	Y+1, r1	; 0x01

	/*check arguments*/
	if ((Copy_u8Row > LCD_u8_ROW1) || (Copy_u8Column > LCD_u8_COLUMN15)){
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	82 30       	cpi	r24, 0x02	; 2
    1c4a:	18 f4       	brcc	.+6      	; 0x1c52 <LCD_enuGoTo+0x20>
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	80 31       	cpi	r24, 0x10	; 16
    1c50:	18 f0       	brcs	.+6      	; 0x1c58 <LCD_enuGoTo+0x26>
		Local_enuErrorStatus = LCD_NOK;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	19 c0       	rjmp	.+50     	; 0x1c8a <LCD_enuGoTo+0x58>
	} else {
	/*****IMPLEMENTATION*****/
		switch(Copy_u8Row){
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	3d 83       	std	Y+5, r19	; 0x05
    1c60:	2c 83       	std	Y+4, r18	; 0x04
    1c62:	8c 81       	ldd	r24, Y+4	; 0x04
    1c64:	9d 81       	ldd	r25, Y+5	; 0x05
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	31 f0       	breq	.+12     	; 0x1c76 <LCD_enuGoTo+0x44>
    1c6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c6e:	21 30       	cpi	r18, 0x01	; 1
    1c70:	31 05       	cpc	r19, r1
    1c72:	31 f0       	breq	.+12     	; 0x1c80 <LCD_enuGoTo+0x4e>
    1c74:	0a c0       	rjmp	.+20     	; 0x1c8a <LCD_enuGoTo+0x58>
		case LCD_u8_ROW0:
			LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS | Copy_u8Column);
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	80 68       	ori	r24, 0x80	; 128
    1c7a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_enuSendInstruction>
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <LCD_enuGoTo+0x58>
			break;
		case LCD_u8_ROW1:
			LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS | (Copy_u8Column + LCD_u8_COLUMN_IN_ROW1));
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	80 5c       	subi	r24, 0xC0	; 192
    1c84:	80 68       	ori	r24, 0x80	; 128
    1c86:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_enuSendInstruction>
			break;
		}
	}

	return Local_enuErrorStatus;
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <LCD_enuSendCustomCharacter>:
 * 				second Argument: 	Copy_u8NumOfBlock, 				options (0 : 7)
 * 				third Argument: 	Copy_u8Row, 					options (LCD_u8_ROW0, LCD_u8_ROW1)
 * 				fourth Argument: 	Copy_u8Column, 					options (LCD_u8_COLUMN0 : LCD_u8_COLUMN15)
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus	LCD_enuSendCustomCharacter(u8 *Add_pu8Pattern, u8 Copy_u8NumOfBlock, u8 Copy_u8Row, u8 Copy_u8Column){
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	65 97       	sbiw	r28, 0x15	; 21
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	9a 8b       	std	Y+18, r25	; 0x12
    1cb2:	89 8b       	std	Y+17, r24	; 0x11
    1cb4:	6b 8b       	std	Y+19, r22	; 0x13
    1cb6:	4c 8b       	std	Y+20, r20	; 0x14
    1cb8:	2d 8b       	std	Y+21, r18	; 0x15
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    1cba:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8Iterator;

	/*check arguments*/
	if ((Add_pu8Pattern == NULL) || (Copy_u8NumOfBlock > LCD_u8_CGRAM_BLOCK_8) || (Copy_u8Row > LCD_u8_ROW1) || (Copy_u8Column > LCD_u8_COLUMN15)){
    1cbc:	89 89       	ldd	r24, Y+17	; 0x11
    1cbe:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	49 f0       	breq	.+18     	; 0x1cd6 <LCD_enuSendCustomCharacter+0x3a>
    1cc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc6:	88 30       	cpi	r24, 0x08	; 8
    1cc8:	30 f4       	brcc	.+12     	; 0x1cd6 <LCD_enuSendCustomCharacter+0x3a>
    1cca:	8c 89       	ldd	r24, Y+20	; 0x14
    1ccc:	82 30       	cpi	r24, 0x02	; 2
    1cce:	18 f4       	brcc	.+6      	; 0x1cd6 <LCD_enuSendCustomCharacter+0x3a>
    1cd0:	8d 89       	ldd	r24, Y+21	; 0x15
    1cd2:	80 31       	cpi	r24, 0x10	; 16
    1cd4:	18 f0       	brcs	.+6      	; 0x1cdc <LCD_enuSendCustomCharacter+0x40>
		Local_enuErrorStatus = LCD_NOK;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	88 8b       	std	Y+16, r24	; 0x10
    1cda:	99 c0       	rjmp	.+306    	; 0x1e0e <LCD_enuSendCustomCharacter+0x172>
	} else {
	/*****IMPLEMENTATION*****/
		LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock * LCD_u8_BYTES_IN_BLOCK));
    1cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	08 96       	adiw	r24, 0x08	; 8
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_enuSendInstruction>
		for (Local_u8Iterator = 0; Local_u8Iterator < LCD_u8_BYTES_IN_BLOCK; Local_u8Iterator++){
    1cf4:	1f 86       	std	Y+15, r1	; 0x0f
    1cf6:	80 c0       	rjmp	.+256    	; 0x1df8 <LCD_enuSendCustomCharacter+0x15c>
			LCD_enuSendCharacter(Add_pu8Pattern[Local_u8Iterator]);
    1cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	89 89       	ldd	r24, Y+17	; 0x11
    1d00:	9a 89       	ldd	r25, Y+18	; 0x12
    1d02:	fc 01       	movw	r30, r24
    1d04:	e2 0f       	add	r30, r18
    1d06:	f3 1f       	adc	r31, r19
    1d08:	80 81       	ld	r24, Z
    1d0a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_enuSendCharacter>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a0 ea       	ldi	r26, 0xA0	; 160
    1d14:	b0 e4       	ldi	r27, 0x40	; 64
    1d16:	8b 87       	std	Y+11, r24	; 0x0b
    1d18:	9c 87       	std	Y+12, r25	; 0x0c
    1d1a:	ad 87       	std	Y+13, r26	; 0x0d
    1d1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	4a e7       	ldi	r20, 0x7A	; 122
    1d2c:	55 e4       	ldi	r21, 0x45	; 69
    1d2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	8f 83       	std	Y+7, r24	; 0x07
    1d38:	98 87       	std	Y+8, r25	; 0x08
    1d3a:	a9 87       	std	Y+9, r26	; 0x09
    1d3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e8       	ldi	r20, 0x80	; 128
    1d4c:	5f e3       	ldi	r21, 0x3F	; 63
    1d4e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d52:	88 23       	and	r24, r24
    1d54:	2c f4       	brge	.+10     	; 0x1d60 <LCD_enuSendCustomCharacter+0xc4>
		__ticks = 1;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
    1d5e:	3f c0       	rjmp	.+126    	; 0x1dde <LCD_enuSendCustomCharacter+0x142>
	else if (__tmp > 65535)
    1d60:	6f 81       	ldd	r22, Y+7	; 0x07
    1d62:	78 85       	ldd	r23, Y+8	; 0x08
    1d64:	89 85       	ldd	r24, Y+9	; 0x09
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	3f ef       	ldi	r19, 0xFF	; 255
    1d6c:	4f e7       	ldi	r20, 0x7F	; 127
    1d6e:	57 e4       	ldi	r21, 0x47	; 71
    1d70:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d74:	18 16       	cp	r1, r24
    1d76:	4c f5       	brge	.+82     	; 0x1dca <LCD_enuSendCustomCharacter+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e2       	ldi	r20, 0x20	; 32
    1d86:	51 e4       	ldi	r21, 0x41	; 65
    1d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <LCD_enuSendCustomCharacter+0x124>
    1da2:	80 e9       	ldi	r24, 0x90	; 144
    1da4:	91 e0       	ldi	r25, 0x01	; 1
    1da6:	9c 83       	std	Y+4, r25	; 0x04
    1da8:	8b 83       	std	Y+3, r24	; 0x03
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_enuSendCustomCharacter+0x112>
    1db2:	9c 83       	std	Y+4, r25	; 0x04
    1db4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	69 f7       	brne	.-38     	; 0x1da2 <LCD_enuSendCustomCharacter+0x106>
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <LCD_enuSendCustomCharacter+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dca:	6f 81       	ldd	r22, Y+7	; 0x07
    1dcc:	78 85       	ldd	r23, Y+8	; 0x08
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_enuSendCustomCharacter+0x14e>
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
	if ((Add_pu8Pattern == NULL) || (Copy_u8NumOfBlock > LCD_u8_CGRAM_BLOCK_8) || (Copy_u8Row > LCD_u8_ROW1) || (Copy_u8Column > LCD_u8_COLUMN15)){
		Local_enuErrorStatus = LCD_NOK;
	} else {
	/*****IMPLEMENTATION*****/
		LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock * LCD_u8_BYTES_IN_BLOCK));
		for (Local_u8Iterator = 0; Local_u8Iterator < LCD_u8_BYTES_IN_BLOCK; Local_u8Iterator++){
    1df2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df4:	8f 5f       	subi	r24, 0xFF	; 255
    1df6:	8f 87       	std	Y+15, r24	; 0x0f
    1df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfa:	88 30       	cpi	r24, 0x08	; 8
    1dfc:	08 f4       	brcc	.+2      	; 0x1e00 <LCD_enuSendCustomCharacter+0x164>
    1dfe:	7c cf       	rjmp	.-264    	; 0x1cf8 <LCD_enuSendCustomCharacter+0x5c>
			LCD_enuSendCharacter(Add_pu8Pattern[Local_u8Iterator]);
			_delay_ms(5);
		}
		LCD_enuGoTo(Copy_u8Row, Copy_u8Column);
    1e00:	8c 89       	ldd	r24, Y+20	; 0x14
    1e02:	6d 89       	ldd	r22, Y+21	; 0x15
    1e04:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <LCD_enuGoTo>
		LCD_enuSendCharacter(Copy_u8NumOfBlock);
    1e08:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_enuSendCharacter>
	}
	return Local_enuErrorStatus;
    1e0e:	88 89       	ldd	r24, Y+16	; 0x10
}
    1e10:	65 96       	adiw	r28, 0x15	; 21
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <LCD_enuSendNumber>:
 * Name: LCD_enuSendNumber
 * Description: Send a number to display on the LCD
 * Arguments:	Copy_u8Number				OPTIONS --> (Any integer number)
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus	LCD_enuSendNumber(u8 Copy_u8Number){
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	61 97       	sbiw	r28, 0x11	; 17
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	8c 87       	std	Y+12, r24	; 0x0c
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    1e38:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8Numbers[10] = "0123456789";
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	02 96       	adiw	r24, 0x02	; 2
    1e3e:	9e 87       	std	Y+14, r25	; 0x0e
    1e40:	8d 87       	std	Y+13, r24	; 0x0d
    1e42:	e0 e6       	ldi	r30, 0x60	; 96
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	f8 8b       	std	Y+16, r31	; 0x10
    1e48:	ef 87       	std	Y+15, r30	; 0x0f
    1e4a:	fa e0       	ldi	r31, 0x0A	; 10
    1e4c:	f9 8b       	std	Y+17, r31	; 0x11
    1e4e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e50:	f8 89       	ldd	r31, Y+16	; 0x10
    1e52:	00 80       	ld	r0, Z
    1e54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e56:	98 89       	ldd	r25, Y+16	; 0x10
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	98 8b       	std	Y+16, r25	; 0x10
    1e5c:	8f 87       	std	Y+15, r24	; 0x0f
    1e5e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1e60:	fe 85       	ldd	r31, Y+14	; 0x0e
    1e62:	00 82       	st	Z, r0
    1e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e68:	01 96       	adiw	r24, 0x01	; 1
    1e6a:	9e 87       	std	Y+14, r25	; 0x0e
    1e6c:	8d 87       	std	Y+13, r24	; 0x0d
    1e6e:	99 89       	ldd	r25, Y+17	; 0x11
    1e70:	91 50       	subi	r25, 0x01	; 1
    1e72:	99 8b       	std	Y+17, r25	; 0x11
    1e74:	e9 89       	ldd	r30, Y+17	; 0x11
    1e76:	ee 23       	and	r30, r30
    1e78:	51 f7       	brne	.-44     	; 0x1e4e <LCD_enuSendNumber+0x2c>
	/***********I will generalize this idea**************/
	LCD_enuSendCharacter(Local_u8Numbers[Copy_u8Number/100%10]);
    1e7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e7c:	94 e6       	ldi	r25, 0x64	; 100
    1e7e:	69 2f       	mov	r22, r25
    1e80:	0e 94 08 12 	call	0x2410	; 0x2410 <__udivmodqi4>
    1e84:	9a e0       	ldi	r25, 0x0A	; 10
    1e86:	69 2f       	mov	r22, r25
    1e88:	0e 94 08 12 	call	0x2410	; 0x2410 <__udivmodqi4>
    1e8c:	89 2f       	mov	r24, r25
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	ce 01       	movw	r24, r28
    1e94:	02 96       	adiw	r24, 0x02	; 2
    1e96:	fc 01       	movw	r30, r24
    1e98:	e2 0f       	add	r30, r18
    1e9a:	f3 1f       	adc	r31, r19
    1e9c:	80 81       	ld	r24, Z
    1e9e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_enuSendCharacter>
	LCD_enuSendCharacter(Local_u8Numbers[Copy_u8Number/10%10]);
    1ea2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ea4:	9a e0       	ldi	r25, 0x0A	; 10
    1ea6:	69 2f       	mov	r22, r25
    1ea8:	0e 94 08 12 	call	0x2410	; 0x2410 <__udivmodqi4>
    1eac:	9a e0       	ldi	r25, 0x0A	; 10
    1eae:	69 2f       	mov	r22, r25
    1eb0:	0e 94 08 12 	call	0x2410	; 0x2410 <__udivmodqi4>
    1eb4:	89 2f       	mov	r24, r25
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	ce 01       	movw	r24, r28
    1ebc:	02 96       	adiw	r24, 0x02	; 2
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	e2 0f       	add	r30, r18
    1ec2:	f3 1f       	adc	r31, r19
    1ec4:	80 81       	ld	r24, Z
    1ec6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_enuSendCharacter>
	LCD_enuSendCharacter(Local_u8Numbers[Copy_u8Number%10]);
    1eca:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ecc:	9a e0       	ldi	r25, 0x0A	; 10
    1ece:	69 2f       	mov	r22, r25
    1ed0:	0e 94 08 12 	call	0x2410	; 0x2410 <__udivmodqi4>
    1ed4:	89 2f       	mov	r24, r25
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	ce 01       	movw	r24, r28
    1edc:	02 96       	adiw	r24, 0x02	; 2
    1ede:	fc 01       	movw	r30, r24
    1ee0:	e2 0f       	add	r30, r18
    1ee2:	f3 1f       	adc	r31, r19
    1ee4:	80 81       	ld	r24, Z
    1ee6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_enuSendCharacter>


	return Local_enuErrorStatus;
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eec:	61 96       	adiw	r28, 0x11	; 17
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <LCD_enuSendSinusoidalString>:
 * Name: LCD_enuSendSinusoidalString
 * Description: Display string as sinusoidal on the LCD
 * Arguments: Add_pu8String	--------> pointer refer to the first address of the string array
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus LCD_enuSendSinusoidalString(u8* Add_pu8String){
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	64 97       	sbiw	r28, 0x14	; 20
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	9b 8b       	std	Y+19, r25	; 0x13
    1f14:	8a 8b       	std	Y+18, r24	; 0x12
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    1f16:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8Iterator = 0;
    1f18:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8Column;

	/*check arguments*/
	if(Add_pu8String == NULL){
    1f1a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f1c:	9b 89       	ldd	r25, Y+19	; 0x13
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	61 f4       	brne	.+24     	; 0x1f3a <LCD_enuSendSinusoidalString+0x3c>
		Local_enuErrorStatus = LCD_NOK;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	89 8b       	std	Y+17, r24	; 0x11
			LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN0);
		}

	}

	return Local_enuErrorStatus;
    1f26:	89 89       	ldd	r24, Y+17	; 0x11
}
    1f28:	64 96       	adiw	r28, 0x14	; 20
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret
		Local_enuErrorStatus = LCD_NOK;
	} else {

	/*****IMPLEMENTATION*****/
		while(TRUE){
			Local_u8Column = 0;
    1f3a:	1f 86       	std	Y+15, r1	; 0x0f
    1f3c:	96 c0       	rjmp	.+300    	; 0x206a <LCD_enuSendSinusoidalString+0x16c>
			while(Local_u8Column<16){
				LCD_enuSendCharacter(Add_pu8String[Local_u8Iterator++]);
    1f3e:	88 89       	ldd	r24, Y+16	; 0x10
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	8a 89       	ldd	r24, Y+18	; 0x12
    1f46:	9b 89       	ldd	r25, Y+19	; 0x13
    1f48:	fc 01       	movw	r30, r24
    1f4a:	e2 0f       	add	r30, r18
    1f4c:	f3 1f       	adc	r31, r19
    1f4e:	90 81       	ld	r25, Z
    1f50:	88 89       	ldd	r24, Y+16	; 0x10
    1f52:	8f 5f       	subi	r24, 0xFF	; 255
    1f54:	88 8b       	std	Y+16, r24	; 0x10
    1f56:	89 2f       	mov	r24, r25
    1f58:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_enuSendCharacter>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 ea       	ldi	r26, 0xA0	; 160
    1f62:	b0 e4       	ldi	r27, 0x40	; 64
    1f64:	8b 87       	std	Y+11, r24	; 0x0b
    1f66:	9c 87       	std	Y+12, r25	; 0x0c
    1f68:	ad 87       	std	Y+13, r26	; 0x0d
    1f6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	4a e7       	ldi	r20, 0x7A	; 122
    1f7a:	55 e4       	ldi	r21, 0x45	; 69
    1f7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	8f 83       	std	Y+7, r24	; 0x07
    1f86:	98 87       	std	Y+8, r25	; 0x08
    1f88:	a9 87       	std	Y+9, r26	; 0x09
    1f8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	78 85       	ldd	r23, Y+8	; 0x08
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <LCD_enuSendSinusoidalString+0xb0>
		__ticks = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	8d 83       	std	Y+5, r24	; 0x05
    1fac:	3f c0       	rjmp	.+126    	; 0x202c <LCD_enuSendSinusoidalString+0x12e>
	else if (__tmp > 65535)
    1fae:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb0:	78 85       	ldd	r23, Y+8	; 0x08
    1fb2:	89 85       	ldd	r24, Y+9	; 0x09
    1fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	3f ef       	ldi	r19, 0xFF	; 255
    1fba:	4f e7       	ldi	r20, 0x7F	; 127
    1fbc:	57 e4       	ldi	r21, 0x47	; 71
    1fbe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fc2:	18 16       	cp	r1, r24
    1fc4:	4c f5       	brge	.+82     	; 0x2018 <LCD_enuSendSinusoidalString+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e2       	ldi	r20, 0x20	; 32
    1fd4:	51 e4       	ldi	r21, 0x41	; 65
    1fd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <LCD_enuSendSinusoidalString+0x110>
    1ff0:	80 e9       	ldi	r24, 0x90	; 144
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	9c 83       	std	Y+4, r25	; 0x04
    1ff6:	8b 83       	std	Y+3, r24	; 0x03
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <LCD_enuSendSinusoidalString+0xfe>
    2000:	9c 83       	std	Y+4, r25	; 0x04
    2002:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2004:	8d 81       	ldd	r24, Y+5	; 0x05
    2006:	9e 81       	ldd	r25, Y+6	; 0x06
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	69 f7       	brne	.-38     	; 0x1ff0 <LCD_enuSendSinusoidalString+0xf2>
    2016:	14 c0       	rjmp	.+40     	; 0x2040 <LCD_enuSendSinusoidalString+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	6f 81       	ldd	r22, Y+7	; 0x07
    201a:	78 85       	ldd	r23, Y+8	; 0x08
    201c:	89 85       	ldd	r24, Y+9	; 0x09
    201e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2020:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	9e 81       	ldd	r25, Y+6	; 0x06
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <LCD_enuSendSinusoidalString+0x13a>
    203c:	9a 83       	std	Y+2, r25	; 0x02
    203e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(5);
				LCD_enuGoTo((Local_u8Column%2==0)?(LCD_u8_ROW1):(LCD_u8_ROW0), ++Local_u8Column);
    2040:	8f 85       	ldd	r24, Y+15	; 0x0f
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	81 70       	andi	r24, 0x01	; 1
    2048:	90 70       	andi	r25, 0x00	; 0
    204a:	1c 8a       	std	Y+20, r1	; 0x14
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	11 f4       	brne	.+4      	; 0x2054 <LCD_enuSendSinusoidalString+0x156>
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	8c 8b       	std	Y+20, r24	; 0x14
    2054:	8f 85       	ldd	r24, Y+15	; 0x0f
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	8f 87       	std	Y+15, r24	; 0x0f
    205a:	8c 89       	ldd	r24, Y+20	; 0x14
    205c:	6f 85       	ldd	r22, Y+15	; 0x0f
    205e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <LCD_enuGoTo>
				if(Local_u8Iterator == 7){
    2062:	88 89       	ldd	r24, Y+16	; 0x10
    2064:	87 30       	cpi	r24, 0x07	; 7
    2066:	09 f4       	brne	.+2      	; 0x206a <LCD_enuSendSinusoidalString+0x16c>
					Local_u8Iterator = 0;
    2068:	18 8a       	std	Y+16, r1	; 0x10
	} else {

	/*****IMPLEMENTATION*****/
		while(TRUE){
			Local_u8Column = 0;
			while(Local_u8Column<16){
    206a:	8f 85       	ldd	r24, Y+15	; 0x0f
    206c:	80 31       	cpi	r24, 0x10	; 16
    206e:	08 f4       	brcc	.+2      	; 0x2072 <LCD_enuSendSinusoidalString+0x174>
    2070:	66 cf       	rjmp	.-308    	; 0x1f3e <LCD_enuSendSinusoidalString+0x40>
				LCD_enuGoTo((Local_u8Column%2==0)?(LCD_u8_ROW1):(LCD_u8_ROW0), ++Local_u8Column);
				if(Local_u8Iterator == 7){
					Local_u8Iterator = 0;
				}
			}
			LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_enuSendInstruction>
			LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN0);
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <LCD_enuGoTo>
    2080:	5c cf       	rjmp	.-328    	; 0x1f3a <LCD_enuSendSinusoidalString+0x3c>

00002082 <LCD_SendEnable>:



/******Private Function********/

static void LCD_SendEnable(void){									// Enable write data at the falling edge.
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	2e 97       	sbiw	r28, 0x0e	; 14
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
	DIO_enuSetPinValue(LCD_u8_ENABLE_PORT, LCD_u8_ENABLE_PIN, DIO_u8_HIGH);		// select pin of enable and set it to be high.
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_enuSetPinValue>
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	a0 e8       	ldi	r26, 0x80	; 128
    20a6:	bf e3       	ldi	r27, 0x3F	; 63
    20a8:	8b 87       	std	Y+11, r24	; 0x0b
    20aa:	9c 87       	std	Y+12, r25	; 0x0c
    20ac:	ad 87       	std	Y+13, r26	; 0x0d
    20ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4a e7       	ldi	r20, 0x7A	; 122
    20be:	55 e4       	ldi	r21, 0x45	; 69
    20c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	8f 83       	std	Y+7, r24	; 0x07
    20ca:	98 87       	std	Y+8, r25	; 0x08
    20cc:	a9 87       	std	Y+9, r26	; 0x09
    20ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d0:	6f 81       	ldd	r22, Y+7	; 0x07
    20d2:	78 85       	ldd	r23, Y+8	; 0x08
    20d4:	89 85       	ldd	r24, Y+9	; 0x09
    20d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20e4:	88 23       	and	r24, r24
    20e6:	2c f4       	brge	.+10     	; 0x20f2 <LCD_SendEnable+0x70>
		__ticks = 1;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
    20f0:	3f c0       	rjmp	.+126    	; 0x2170 <LCD_SendEnable+0xee>
	else if (__tmp > 65535)
    20f2:	6f 81       	ldd	r22, Y+7	; 0x07
    20f4:	78 85       	ldd	r23, Y+8	; 0x08
    20f6:	89 85       	ldd	r24, Y+9	; 0x09
    20f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	3f ef       	ldi	r19, 0xFF	; 255
    20fe:	4f e7       	ldi	r20, 0x7F	; 127
    2100:	57 e4       	ldi	r21, 0x47	; 71
    2102:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2106:	18 16       	cp	r1, r24
    2108:	4c f5       	brge	.+82     	; 0x215c <LCD_SendEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210a:	6b 85       	ldd	r22, Y+11	; 0x0b
    210c:	7c 85       	ldd	r23, Y+12	; 0x0c
    210e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2110:	9e 85       	ldd	r25, Y+14	; 0x0e
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e2       	ldi	r20, 0x20	; 32
    2118:	51 e4       	ldi	r21, 0x41	; 65
    211a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
    2132:	0f c0       	rjmp	.+30     	; 0x2152 <LCD_SendEnable+0xd0>
    2134:	80 e9       	ldi	r24, 0x90	; 144
    2136:	91 e0       	ldi	r25, 0x01	; 1
    2138:	9c 83       	std	Y+4, r25	; 0x04
    213a:	8b 83       	std	Y+3, r24	; 0x03
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <LCD_SendEnable+0xbe>
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	69 f7       	brne	.-38     	; 0x2134 <LCD_SendEnable+0xb2>
    215a:	14 c0       	rjmp	.+40     	; 0x2184 <LCD_SendEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215c:	6f 81       	ldd	r22, Y+7	; 0x07
    215e:	78 85       	ldd	r23, Y+8	; 0x08
    2160:	89 85       	ldd	r24, Y+9	; 0x09
    2162:	9a 85       	ldd	r25, Y+10	; 0x0a
    2164:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	9a 81       	ldd	r25, Y+2	; 0x02
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <LCD_SendEnable+0xfa>
    2180:	9a 83       	std	Y+2, r25	; 0x02
    2182:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);													// delay 1ms before the falling.
	DIO_enuSetPinValue(LCD_u8_ENABLE_PORT, LCD_u8_ENABLE_PIN, DIO_u8_LOW);		//select pin of enable and set it to be low.
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_enuSetPinValue>
}
    218e:	2e 96       	adiw	r28, 0x0e	; 14
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <KEYPAD_vidInti>:

extern const u8 KEYPAD_au8KeyValue [KEYPAD_u8_ROWS_NUM][KEYPAD_u8_COLUMNS_NUM];
extern const u8 KEYPAD_au8Rows[KEYPAD_u8_ROWS_NUM][KEYPAD_u8_PORT_PIN];
extern const u8 KEYPAD_au8Columns[KEYPAD_u8_COLUMNS_NUM][KEYPAD_u8_PORT_PIN];

void KEYPAD_vidInti(void){
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    21a8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidInit>
}
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <KEYPAD_vidGetPressedKey>:


KEYPAD_tenuErrorStatus KEYPAD_vidGetPressedKey(u8 *Add_pu8KeyValue){
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	64 97       	sbiw	r28, 0x14	; 20
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
	KEYPAD_tenuErrorStatus Local_enuErrorStatus = KEYPAD_OK;
    21ca:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8IteratorRow;
	u8 Local_u8IteratorColumn;
	u8 Local_u8KeyPressedIndicator;
	/* check argument */
	if(Add_pu8KeyValue == NULL){
    21cc:	8b 89       	ldd	r24, Y+19	; 0x13
    21ce:	9c 89       	ldd	r25, Y+20	; 0x14
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	19 f4       	brne	.+6      	; 0x21da <KEYPAD_vidGetPressedKey+0x28>
		Local_enuErrorStatus = KEYPAD_NOK;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	89 8b       	std	Y+17, r24	; 0x11
    21d8:	e5 c0       	rjmp	.+458    	; 0x23a4 <KEYPAD_vidGetPressedKey+0x1f2>
	} else {
		for(Local_u8IteratorColumn = 0; Local_u8IteratorColumn < KEYPAD_u8_COLUMNS_NUM; Local_u8IteratorColumn++){
    21da:	1f 86       	std	Y+15, r1	; 0x0f
    21dc:	df c0       	rjmp	.+446    	; 0x239c <KEYPAD_vidGetPressedKey+0x1ea>
			DIO_enuSetPinValue(KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PORT],
    21de:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	fc 01       	movw	r30, r24
    21ea:	e9 56       	subi	r30, 0x69	; 105
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	20 81       	ld	r18, Z
    21f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f2:	88 2f       	mov	r24, r24
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	fc 01       	movw	r30, r24
    21fc:	e8 56       	subi	r30, 0x68	; 104
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	90 81       	ld	r25, Z
    2202:	82 2f       	mov	r24, r18
    2204:	69 2f       	mov	r22, r25
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_enuSetPinValue>
								KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PIN], DIO_u8_LOW);
			for(Local_u8IteratorRow = 0; Local_u8IteratorRow < KEYPAD_u8_ROWS_NUM; Local_u8IteratorRow++){
    220c:	18 8a       	std	Y+16, r1	; 0x10
    220e:	a8 c0       	rjmp	.+336    	; 0x2360 <KEYPAD_vidGetPressedKey+0x1ae>
				DIO_enuGetPinValue(KEYPAD_au8Rows[Local_u8IteratorRow][KEYPAD_u8_PORT],
    2210:	88 89       	ldd	r24, Y+16	; 0x10
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	fc 01       	movw	r30, r24
    221c:	e1 57       	subi	r30, 0x71	; 113
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	40 81       	ld	r20, Z
    2222:	88 89       	ldd	r24, Y+16	; 0x10
    2224:	88 2f       	mov	r24, r24
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	fc 01       	movw	r30, r24
    222e:	e0 57       	subi	r30, 0x70	; 112
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	90 81       	ld	r25, Z
    2234:	9e 01       	movw	r18, r28
    2236:	2e 5e       	subi	r18, 0xEE	; 238
    2238:	3f 4f       	sbci	r19, 0xFF	; 255
    223a:	84 2f       	mov	r24, r20
    223c:	69 2f       	mov	r22, r25
    223e:	a9 01       	movw	r20, r18
    2240:	0e 94 01 07 	call	0xe02	; 0xe02 <DIO_enuGetPinValue>
									KEYPAD_au8Rows[Local_u8IteratorRow][KEYPAD_u8_PIN], &Local_u8KeyPressedIndicator);
				if(Local_u8KeyPressedIndicator == 0){	// will be 0 only if any key pressed
    2244:	8a 89       	ldd	r24, Y+18	; 0x12
    2246:	88 23       	and	r24, r24
    2248:	09 f0       	breq	.+2      	; 0x224c <KEYPAD_vidGetPressedKey+0x9a>
    224a:	87 c0       	rjmp	.+270    	; 0x235a <KEYPAD_vidGetPressedKey+0x1a8>
					*Add_pu8KeyValue = KEYPAD_au8KeyValue[Local_u8IteratorRow][Local_u8IteratorColumn]; //put the selected pressed key to the retrurnval
    224c:	88 89       	ldd	r24, Y+16	; 0x10
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	8f 85       	ldd	r24, Y+15	; 0x0f
    2254:	48 2f       	mov	r20, r24
    2256:	50 e0       	ldi	r21, 0x00	; 0
    2258:	c9 01       	movw	r24, r18
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	82 0f       	add	r24, r18
    2260:	93 1f       	adc	r25, r19
    2262:	84 0f       	add	r24, r20
    2264:	95 1f       	adc	r25, r21
    2266:	fc 01       	movw	r30, r24
    2268:	ed 57       	subi	r30, 0x7D	; 125
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	80 81       	ld	r24, Z
    226e:	eb 89       	ldd	r30, Y+19	; 0x13
    2270:	fc 89       	ldd	r31, Y+20	; 0x14
    2272:	80 83       	st	Z, r24
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a0 e7       	ldi	r26, 0x70	; 112
    227a:	b1 e4       	ldi	r27, 0x41	; 65
    227c:	8b 87       	std	Y+11, r24	; 0x0b
    227e:	9c 87       	std	Y+12, r25	; 0x0c
    2280:	ad 87       	std	Y+13, r26	; 0x0d
    2282:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2284:	6b 85       	ldd	r22, Y+11	; 0x0b
    2286:	7c 85       	ldd	r23, Y+12	; 0x0c
    2288:	8d 85       	ldd	r24, Y+13	; 0x0d
    228a:	9e 85       	ldd	r25, Y+14	; 0x0e
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a e7       	ldi	r20, 0x7A	; 122
    2292:	55 e4       	ldi	r21, 0x45	; 69
    2294:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	8f 83       	std	Y+7, r24	; 0x07
    229e:	98 87       	std	Y+8, r25	; 0x08
    22a0:	a9 87       	std	Y+9, r26	; 0x09
    22a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e8       	ldi	r20, 0x80	; 128
    22b2:	5f e3       	ldi	r21, 0x3F	; 63
    22b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <KEYPAD_vidGetPressedKey+0x114>
		__ticks = 1;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
    22c4:	3f c0       	rjmp	.+126    	; 0x2344 <KEYPAD_vidGetPressedKey+0x192>
	else if (__tmp > 65535)
    22c6:	6f 81       	ldd	r22, Y+7	; 0x07
    22c8:	78 85       	ldd	r23, Y+8	; 0x08
    22ca:	89 85       	ldd	r24, Y+9	; 0x09
    22cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	3f ef       	ldi	r19, 0xFF	; 255
    22d2:	4f e7       	ldi	r20, 0x7F	; 127
    22d4:	57 e4       	ldi	r21, 0x47	; 71
    22d6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22da:	18 16       	cp	r1, r24
    22dc:	4c f5       	brge	.+82     	; 0x2330 <KEYPAD_vidGetPressedKey+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22de:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e2       	ldi	r20, 0x20	; 32
    22ec:	51 e4       	ldi	r21, 0x41	; 65
    22ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
    2306:	0f c0       	rjmp	.+30     	; 0x2326 <KEYPAD_vidGetPressedKey+0x174>
    2308:	80 e9       	ldi	r24, 0x90	; 144
    230a:	91 e0       	ldi	r25, 0x01	; 1
    230c:	9c 83       	std	Y+4, r25	; 0x04
    230e:	8b 83       	std	Y+3, r24	; 0x03
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	9c 81       	ldd	r25, Y+4	; 0x04
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <KEYPAD_vidGetPressedKey+0x162>
    2318:	9c 83       	std	Y+4, r25	; 0x04
    231a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	69 f7       	brne	.-38     	; 0x2308 <KEYPAD_vidGetPressedKey+0x156>
    232e:	1c c0       	rjmp	.+56     	; 0x2368 <KEYPAD_vidGetPressedKey+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2330:	6f 81       	ldd	r22, Y+7	; 0x07
    2332:	78 85       	ldd	r23, Y+8	; 0x08
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	9a 83       	std	Y+2, r25	; 0x02
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <KEYPAD_vidGetPressedKey+0x19e>
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	07 c0       	rjmp	.+14     	; 0x2368 <KEYPAD_vidGetPressedKey+0x1b6>
		Local_enuErrorStatus = KEYPAD_NOK;
	} else {
		for(Local_u8IteratorColumn = 0; Local_u8IteratorColumn < KEYPAD_u8_COLUMNS_NUM; Local_u8IteratorColumn++){
			DIO_enuSetPinValue(KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PORT],
								KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PIN], DIO_u8_LOW);
			for(Local_u8IteratorRow = 0; Local_u8IteratorRow < KEYPAD_u8_ROWS_NUM; Local_u8IteratorRow++){
    235a:	88 89       	ldd	r24, Y+16	; 0x10
    235c:	8f 5f       	subi	r24, 0xFF	; 255
    235e:	88 8b       	std	Y+16, r24	; 0x10
    2360:	88 89       	ldd	r24, Y+16	; 0x10
    2362:	84 30       	cpi	r24, 0x04	; 4
    2364:	08 f4       	brcc	.+2      	; 0x2368 <KEYPAD_vidGetPressedKey+0x1b6>
    2366:	54 cf       	rjmp	.-344    	; 0x2210 <KEYPAD_vidGetPressedKey+0x5e>
					*Add_pu8KeyValue = KEYPAD_au8KeyValue[Local_u8IteratorRow][Local_u8IteratorColumn]; //put the selected pressed key to the retrurnval
					_delay_ms(15);
					break; // break from the loop
				}
			}
			DIO_enuSetPinValue(KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PORT],
    2368:	8f 85       	ldd	r24, Y+15	; 0x0f
    236a:	88 2f       	mov	r24, r24
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	fc 01       	movw	r30, r24
    2374:	e9 56       	subi	r30, 0x69	; 105
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	20 81       	ld	r18, Z
    237a:	8f 85       	ldd	r24, Y+15	; 0x0f
    237c:	88 2f       	mov	r24, r24
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	fc 01       	movw	r30, r24
    2386:	e8 56       	subi	r30, 0x68	; 104
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	90 81       	ld	r25, Z
    238c:	82 2f       	mov	r24, r18
    238e:	69 2f       	mov	r22, r25
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_enuSetPinValue>
	u8 Local_u8KeyPressedIndicator;
	/* check argument */
	if(Add_pu8KeyValue == NULL){
		Local_enuErrorStatus = KEYPAD_NOK;
	} else {
		for(Local_u8IteratorColumn = 0; Local_u8IteratorColumn < KEYPAD_u8_COLUMNS_NUM; Local_u8IteratorColumn++){
    2396:	8f 85       	ldd	r24, Y+15	; 0x0f
    2398:	8f 5f       	subi	r24, 0xFF	; 255
    239a:	8f 87       	std	Y+15, r24	; 0x0f
    239c:	8f 85       	ldd	r24, Y+15	; 0x0f
    239e:	83 30       	cpi	r24, 0x03	; 3
    23a0:	08 f4       	brcc	.+2      	; 0x23a4 <KEYPAD_vidGetPressedKey+0x1f2>
    23a2:	1d cf       	rjmp	.-454    	; 0x21de <KEYPAD_vidGetPressedKey+0x2c>
			}
			DIO_enuSetPinValue(KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PORT],
								KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PIN], DIO_u8_HIGH);
		}
	}
	return Local_enuErrorStatus;
    23a4:	89 89       	ldd	r24, Y+17	; 0x11
}
    23a6:	64 96       	adiw	r28, 0x14	; 20
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	f8 94       	cli
    23ac:	de bf       	out	0x3e, r29	; 62
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	cd bf       	out	0x3d, r28	; 61
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <DCMOTOR_vidInit>:
#include "DCMOTOR_int.h"




void DCMOTOR_vidInit(void){
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    23c0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidInit>
}
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <main>:
#include <avr/interrupt.h>
#include "../LIB/STD_Types.h"
#include "../LIB/BIT_Utils.h"
#include "../MCAL/DIO/DIO_int.h"

void main(void) {
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <main+0x6>
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62


	DIO_vidInit();
    23d4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidInit>
	while(TRUE){
		u8 *val = 5;
    23d8:	85 e0       	ldi	r24, 0x05	; 5
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	89 83       	std	Y+1, r24	; 0x01
		DIO_enuGetPinValue(DIO_u8_PORTB,DIO_u8_PIN1, &val);
    23e0:	9e 01       	movw	r18, r28
    23e2:	2f 5f       	subi	r18, 0xFF	; 255
    23e4:	3f 4f       	sbci	r19, 0xFF	; 255
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	a9 01       	movw	r20, r18
    23ec:	0e 94 01 07 	call	0xe02	; 0xe02 <DIO_enuGetPinValue>
		if(val == DIO_u8_LOW){
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	31 f4       	brne	.+12     	; 0x2404 <main+0x3a>
			DIO_enuSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_HIGH);
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	41 e0       	ldi	r20, 0x01	; 1
    23fe:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_enuSetPinValue>
    2402:	ea cf       	rjmp	.-44     	; 0x23d8 <main+0xe>
		}else{
			DIO_enuSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_LOW);
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_enuSetPinValue>
    240e:	e4 cf       	rjmp	.-56     	; 0x23d8 <main+0xe>

00002410 <__udivmodqi4>:
    2410:	99 1b       	sub	r25, r25
    2412:	79 e0       	ldi	r23, 0x09	; 9
    2414:	04 c0       	rjmp	.+8      	; 0x241e <__udivmodqi4_ep>

00002416 <__udivmodqi4_loop>:
    2416:	99 1f       	adc	r25, r25
    2418:	96 17       	cp	r25, r22
    241a:	08 f0       	brcs	.+2      	; 0x241e <__udivmodqi4_ep>
    241c:	96 1b       	sub	r25, r22

0000241e <__udivmodqi4_ep>:
    241e:	88 1f       	adc	r24, r24
    2420:	7a 95       	dec	r23
    2422:	c9 f7       	brne	.-14     	; 0x2416 <__udivmodqi4_loop>
    2424:	80 95       	com	r24
    2426:	08 95       	ret

00002428 <__prologue_saves__>:
    2428:	2f 92       	push	r2
    242a:	3f 92       	push	r3
    242c:	4f 92       	push	r4
    242e:	5f 92       	push	r5
    2430:	6f 92       	push	r6
    2432:	7f 92       	push	r7
    2434:	8f 92       	push	r8
    2436:	9f 92       	push	r9
    2438:	af 92       	push	r10
    243a:	bf 92       	push	r11
    243c:	cf 92       	push	r12
    243e:	df 92       	push	r13
    2440:	ef 92       	push	r14
    2442:	ff 92       	push	r15
    2444:	0f 93       	push	r16
    2446:	1f 93       	push	r17
    2448:	cf 93       	push	r28
    244a:	df 93       	push	r29
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	ca 1b       	sub	r28, r26
    2452:	db 0b       	sbc	r29, r27
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	09 94       	ijmp

00002460 <__epilogue_restores__>:
    2460:	2a 88       	ldd	r2, Y+18	; 0x12
    2462:	39 88       	ldd	r3, Y+17	; 0x11
    2464:	48 88       	ldd	r4, Y+16	; 0x10
    2466:	5f 84       	ldd	r5, Y+15	; 0x0f
    2468:	6e 84       	ldd	r6, Y+14	; 0x0e
    246a:	7d 84       	ldd	r7, Y+13	; 0x0d
    246c:	8c 84       	ldd	r8, Y+12	; 0x0c
    246e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2470:	aa 84       	ldd	r10, Y+10	; 0x0a
    2472:	b9 84       	ldd	r11, Y+9	; 0x09
    2474:	c8 84       	ldd	r12, Y+8	; 0x08
    2476:	df 80       	ldd	r13, Y+7	; 0x07
    2478:	ee 80       	ldd	r14, Y+6	; 0x06
    247a:	fd 80       	ldd	r15, Y+5	; 0x05
    247c:	0c 81       	ldd	r16, Y+4	; 0x04
    247e:	1b 81       	ldd	r17, Y+3	; 0x03
    2480:	aa 81       	ldd	r26, Y+2	; 0x02
    2482:	b9 81       	ldd	r27, Y+1	; 0x01
    2484:	ce 0f       	add	r28, r30
    2486:	d1 1d       	adc	r29, r1
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	ed 01       	movw	r28, r26
    2494:	08 95       	ret

00002496 <_exit>:
    2496:	f8 94       	cli

00002498 <__stop_program>:
    2498:	ff cf       	rjmp	.-2      	; 0x2498 <__stop_program>
